{"version":3,"file":"options.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACJ;AACkB;AACF;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAG;AAC3B,sBAAsB,4CAAG;AACzB,kCAAkC,mEAA2B;AAC7D;AACA,0BAA0B,uEAA+B;AACzD,8BAA8B,mEAA2B;AACzD,eAAe,4CAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAK;AAC5B,wBAAwB,gDAAK;AAC7B,wBAAwB,4CAAG,kCAAkC,gEAAwB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,wBAAwB,gDAAK;AAC7B,sBAAsB,gDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAK;AACpB;AACA;AACA;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACF;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6DAAgB;AAChC,gBAAgB,6DAAgB;AAChC,kCAAkC,6DAAgB,SAAS,6DAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAG;AACtB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAS;AAC5B;AACA;AACA,mBAAmB,sDAAS;AAC5B;AACA;AACA,mBAAmB,sDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmD;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,2DAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,wBAAwB,6DAAgB;AACxC;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,4BAA4B,6DAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,gBAAgB,2DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAQ;AAC5B,oBAAoB,2DAAQ;AAC5B;AACA;AACA;AACA;AACA,oCAAoC,2DAAQ;AAC5C;AACA;AACA,mCAAmC,2DAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2DAAQ;AACpC,2BAA2B,2DAAQ;AACnC,6BAA6B,2DAAQ;AACrC,4BAA4B,2DAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiE;AAC7B;AAC6B;AAClB;AACK;AACF;AACG;AACrD;AACA,8BAA8B,uDAAO;AACrC,2BAA2B,uDAAO;AAClC;AACA;AACA,8BAA8B,uDAAO;AACrC;AACA;AACA;AACA,0BAA0B,4CAAG;AAC7B;AACA;AACA;AACA;AACA,sCAAsC,4CAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yEAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAY;AACpB,SAAS,2DAAY;AACrB,eAAe,2DAAY;AAC3B;AACA;AACA,eAAe,2DAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,2DAAY;AAC3D;AACA;AACA;AACA,CAAC;AACD,iDAAiD,2DAAY;AAC7D;AACA;AACA;AACA,CAAC;AACD,gDAAgD,2DAAY;AAC5D;AACA;AACA;AACA,CAAC;AACD,+CAA+C,2DAAY;AAC3D;AACA;AACA;AACA,CAAC;AACD,sDAAsD,2DAAY;AAClE;AACA;AACA;AACA,CAAC;AACD,mCAAmC,2DAAY;AAC/C;AACA;AACA;AACA;AACA,CAAC;AACD,qCAAqC,2DAAY;AACjD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA,CAAC;AACD,mCAAmC,2DAAY;AAC/C;AACA;AACA;AACA;AACA,CAAC;AACD,sCAAsC,2DAAY;AAClD;AACA;AACA;AACA;AACA,CAAC;AACD,+CAA+C,2DAAY;AAC3D;AACA;AACA;AACA;AACA,CAAC;AACD,4CAA4C,2DAAY;AACxD;AACA;AACA;AACA;AACA,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA,CAAC;AACD,6CAA6C,2DAAY;AACzD;AACA;AACA;AACA;AACA,CAAC;AACD,gDAAgD,2DAAY;AAC5D;AACA;AACA;AACA;AACA,CAAC;AACD,kCAAkC,2DAAY;AAC9C;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,+BAA+B,2DAAY;AAC3C;AACA;AACA;AACA,CAAC;AACD,8BAA8B,2DAAY;AAC1C;AACA;AACA;AACA,CAAC;AACD,oCAAoC,2DAAY;AAChD;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,kCAAkC,2DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,2CAA2C,2DAAY;AACvD;AACA;AACA;AACA;AACA,mBAAmB,2DAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,kCAAkC,2DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,oCAAoC,2DAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,2CAA2C,2DAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,6CAA6C,2DAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAY;AAC3B,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,iCAAiC,2DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,mCAAmC,2DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,0CAA0C,2DAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAe;AAC9B,KAAK;AACL;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,4CAA4C,2DAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAY;AAC3B,KAAK;AACL;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,8BAA8B,2DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,qCAAqC,2DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,wCAAwC,2DAAY;AACpD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,8CAA8C,2DAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,0CAA0C,2DAAY;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,gDAAgD,2DAAY;AAC5D;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,sCAAsC,2DAAY;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,8BAA8B,8DAAa;AAC3C,CAAC;AACD,wCAAwC,2DAAY;AACpD;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD,+CAA+C,2DAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,CAAC;AACD;;;;;;;;;;;;;;ACliBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACF;AACa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gBAAgB,QAAQ,KAAK,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qEAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6DAAgB;AACrC,uBAAuB,6DAAgB;AACvC,sBAAsB,6DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAW;AAC/B,oBAAoB,wDAAW;AAC/B,oBAAoB,wDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qEAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,qEAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAW;AAC9B,mBAAmB,wDAAW;AAC9B,mBAAmB,wDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACd;AACS;AACgB;AAC5D;AACA;AACA;AACA;AACA;AACO;AACP;AACA,uBAAuB,qDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA,4BAA4B,gEAAmB;AAC/C;AACA;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA,4BAA4B,gEAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA,2BAA2B,4CAAK,yEAAyE,qEAAiB;AAC1H;AACA;AACA;AACA,sEAAsE,6DAAgB;AACtF;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACF;AACjB;AACyB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gEAAwB;AACvwBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qEAAiB;AACnD;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,mBAAmB,gEAAwB;AAC3C;AACA,qBAAqB,uEAA+B;AACpD;AACA,kBAAkB,6DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACF;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAmB,4CAA4C,6DAAgB;AAC5G;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS;AACtC,YAAY,sDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiC;AACM;AACO;AACE;AACU;AAC3B;AACF;AACe;AACD;AACC;AACG;AACH;AACI;AACL;AACA;AACR;AACQ;AACA;AACG;AACF;AACE;AACH;AACG;AACH;AACV;AACkB;AACZ;AACD;AACE;AACD;AACA;;AAEvC;AAC+C;AACJ;AACA;AACP;;AAEpC;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACc;AAClD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAG;AACvB;AACA;AACA;AACA,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC;AACA;AACA,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC;AACA,qBAAqB,2DAAY;AACjC;AACA;AACA;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACpC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAG;AAClB;AACA;AACA;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACjD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AACV;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAW;AAClC;AACA,eAAe,mEAAgB;AAC/B;AACA;AACA;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA,0BAA0B,gEAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oEAAgB;AAClD;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,gCAAgC,4BAA4B;AAC5D,4BAA4B,kBAAkB;AAC9C,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;AACC;AAClD;AACA,wBAAwB;AACxB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD,qCAAqC,oBAAoB;AACzD,qCAAqC,oBAAoB;AACzD,qCAAqC,oBAAoB;AACzD,oCAAoC,oBAAoB;AACxD,6BAA6B,2DAAY;AACzC;AACA,wBAAwB,8DAAiB;AACzC,0BAA0B,gEAAmB;AAC7C,yBAAyB,+DAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC,sCAAsC,qBAAqB;AAC3D,uCAAuC,qBAAqB;AAC5D,uCAAuC,qBAAqB;AAC5D,uCAAuC,qBAAqB;AAC5D,uCAAuC,qBAAqB;AAC5D,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtrXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACwB;AACb;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAG;AACjC;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,aAAa,cAAc,iBAAiB;AACvG;AACA;AACA,mBAAmB,uEAA0B;AAC7C;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,uBAAuB,uEAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AAC1D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kEAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kEAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AAC1D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiE;AACL;AACW;AACnB;AACb;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,6DAAa;AAChD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY,SAAS,yEAAe;AACjE,mCAAmC,+EAAgB;AACnD;AACA,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACb;AACK;AACb;AACvC;AACA;AACA;AACO,+BAA+B,6DAAa;AACnD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY,kBAAkB,uEAA0B;AACpF,8BAA8B,oEAAY,kBAAkB,6DAAa;AACzE,6BAA6B,oEAAY,kBAAkB,6DAAa;AACxE,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiE;AACL;AACW;AACnB;AACb;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,6DAAa;AACjD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY,SAAS,yEAAe;AACjE,mCAAmC,+EAAgB;AACnD;AACA,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACb;AACK;AACb;AACvC;AACA;AACA;AACO,+BAA+B,6DAAa;AACnD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY,kBAAkB,uEAA0B;AACpF,8BAA8B,oEAAY,kBAAkB,uEAA0B;AACtF,6BAA6B,oEAAY;AACzC,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACR;AACb;AACvC;AACO,+BAA+B,6DAAa;AACnD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY;AACzC,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACR;AACb;AACvC;AACO,4BAA4B,6DAAa;AAChD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY;AACzC,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACb;AACK;AACb;AACvC;AACA;AACA;AACO,4BAA4B,6DAAa;AAChD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY,kBAAkB,uEAA0B;AACrF,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACb;AACK;AACb;AACvC;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,6DAAa;AAClD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY;AAC1C,6BAA6B,oEAAY,kBAAkB,uEAA0B;AACrF,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACR;AACb;AACvC;AACA;AACA;AACA;AACO,4BAA4B,6DAAa;AAChD;AACA;AACA;AACA,qBAAqB,gDAAO;AAC5B;AACA;AACA,4BAA4B,oEAAY;AACxC,8BAA8B,oEAAY,kBAAkB,6DAAa;AACzE,6BAA6B,oEAAY,kBAAkB,6DAAa;AACxE,4BAA4B,oEAAY;AACxC,mCAAmC,oEAAY;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA,mCAAmC,cAAc;AACjD,oCAAoC,oEAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE;AACA,yBAAyB,MAAM;AAC/B;AACA,2BAA2B,mEAAsB;AACjD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACkB;AACF;AACpD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC,wBAAwB,oEAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD,wBAAwB,uEAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C,+BAA+B,4CAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAsB;AAC1C,oBAAoB,uEAA+B;AACnD;AACA;AACA;AACA,yBAAyB,uEAA+B;AACxD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,0DAAwB;AACnoDAAkB;AAC7B;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkE;AACxB;AACK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAW;AAChC;AACA;AACA;AACA,mBAAmB,0EAAe;AAClC,mBAAmB,kDAAK;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,cAAc,wDAAsB;AACpC,cAAc,0DAAwB;AACtC,cAAc,yDAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AACgB;AACb;AACW;AACR;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,kEAAW;AAC/B;AACA;AACA;AACA,mBAAmB,qDAAM;AACzB,kBAAkB,qDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yBAAyB,qEAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gBAAgB,kDAAK;AACrB;AACA,oBAAoB,kEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW,GAAG,WAAW,EAAE,KAAK;AAClF,8BAA8B,6DAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAW;AACjC,mDAAmD,MAAM,EAAE,OAAO;AAClE;AACA;AACA;;;;;;;;;;;;;;;;AC/HyC;;;;;;;;;;;;;;;;;ACgBkB;AAC3D;AACA;AACA,kBAAkB,8FAAqB;AACvC;AACA,kBAAkB,wFAAW;AAC7B;AACA;AACA,+BAA+B,KAAK,GAAG,SAAS,GAAG,aAAa;AAChE;AACA,IAAI,sBAAsB,aAAa;AACvC;AACA;AACA;AACA,cAAc,4EAAG,SAAS,wFAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iBAAiB,sFAAa;AAC9B,IAAI;AACJ,iBAAiB,yFAAgB;AACjC,IAAI;AACJ,iBAAiB,uFAAc;AAC/B,IAAI;AACJ,iBAAiB,yFAAgB;AACjC,IAAI;AACJ,iBAAiB,yFAAgB;AACjC,IAAI;AACJ,iBAAiB,sFAAa;AAC9B,IAAI;AACJ,iBAAiB,wFAAe;AAChC,IAAI;AACJ,iBAAiB,sFAAa;AAC9B,IAAI;AACJ,iBAAiB,sFAAa;AAC9B,IAAI;AACJ;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,4BAA4B,wFAAe;AAC3C,mBAAmB,8EAAK;AACxB;AACA,iBAAiB,wFAAW;AAC5B,GAAG;AACH;;;;;;;UC3MA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gEAAY;AAChB,IAAI;AACJ,IAAI,gEAAY;AAChB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,6BAA6B,mCAAmC;AAChE;AACA,IAAI,gEAAY;AAChB,IAAI;AACJ,IAAI,gEAAY;AAChB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,GAAG,EAAE;AACvC;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,GAAG,EAAE;AACvC;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gEAAY;AAClB,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0CAA0C,OAAO;AACjD;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,WAAW,4BAA4B,WAAW;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wEAAoB;AAC1B,MAAM;AACN,MAAM,wEAAoB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL,yCAAyC,GAAG;AAC5C;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD,mDAAmD,MAAM;AACzD;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtsCAAsC,iBAAiB;AACvD;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC,CAAC","sources":["webpack://material-color-css/./node_modules/@material/material-color-utilities/blend/blend.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/contrast/contrast.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/dislike/dislike_analyzer.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/dynamiccolor/contrast_curve.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/dynamiccolor/dynamic_color.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/dynamiccolor/material_dynamic_colors.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/dynamiccolor/tone_delta_pair.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/hct/cam16.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/hct/hct.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/hct/hct_solver.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/hct/viewing_conditions.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/index.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/palettes/core_palette.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/palettes/tonal_palette.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/quantize/lab_point_provider.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/quantize/quantizer_celebi.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/quantize/quantizer_map.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/quantize/quantizer_wsmeans.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/quantize/quantizer_wu.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/dynamic_scheme.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_android.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_content.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_expressive.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_fidelity.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_fruit_salad.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_monochrome.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_neutral.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_rainbow.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_tonal_spot.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/scheme_vibrant.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/scheme/variant.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/score/score.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/temperature/temperature_cache.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/utils/color_utils.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/utils/image_utils.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/utils/math_utils.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/utils/string_utils.js","webpack://material-color-css/./node_modules/@material/material-color-utilities/utils/theme_utils.js","webpack://material-color-css/./node_modules/material-color-css/index.js","webpack://material-color-css/./node_modules/material-color-css/src/material-colors.js","webpack://material-color-css/webpack/bootstrap","webpack://material-color-css/webpack/runtime/define property getters","webpack://material-color-css/webpack/runtime/hasOwnProperty shorthand","webpack://material-color-css/webpack/runtime/make namespace object","webpack://material-color-css/./src/options.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport { Cam16 } from '../hct/cam16.js';\nimport { Hct } from '../hct/hct.js';\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n    /**\n     * Blend the design color's HCT hue towards the key color's HCT\n     * hue, in a way that leaves the original color recognizable and\n     * recognizably shifted towards the key color.\n     *\n     * @param designColor ARGB representation of an arbitrary color.\n     * @param sourceColor ARGB representation of the main theme color.\n     * @return The design color with a hue shifted towards the\n     * system's color, a slightly warmer/cooler variant of the design\n     * color's hue.\n     */\n    static harmonize(designColor, sourceColor) {\n        const fromHct = Hct.fromInt(designColor);\n        const toHct = Hct.fromInt(sourceColor);\n        const differenceDegrees = mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\n        const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n        const outputHue = mathUtils.sanitizeDegreesDouble(fromHct.hue +\n            rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));\n        return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n    }\n    /**\n     * Blends hue from one color into another. The chroma and tone of\n     * the original color are maintained.\n     *\n     * @param from ARGB representation of color\n     * @param to ARGB representation of color\n     * @param amount how much blending to perform; 0.0 >= and <= 1.0\n     * @return from, with a hue blended towards to. Chroma and tone\n     * are constant.\n     */\n    static hctHue(from, to, amount) {\n        const ucs = Blend.cam16Ucs(from, to, amount);\n        const ucsCam = Cam16.fromInt(ucs);\n        const fromCam = Cam16.fromInt(from);\n        const blended = Hct.from(ucsCam.hue, fromCam.chroma, colorUtils.lstarFromArgb(from));\n        return blended.toInt();\n    }\n    /**\n     * Blend in CAM16-UCS space.\n     *\n     * @param from ARGB representation of color\n     * @param to ARGB representation of color\n     * @param amount how much blending to perform; 0.0 >= and <= 1.0\n     * @return from, blended towards to. Hue, chroma, and tone will\n     * change.\n     */\n    static cam16Ucs(from, to, amount) {\n        const fromCam = Cam16.fromInt(from);\n        const toCam = Cam16.fromInt(to);\n        const fromJ = fromCam.jstar;\n        const fromA = fromCam.astar;\n        const fromB = fromCam.bstar;\n        const toJ = toCam.jstar;\n        const toA = toCam.astar;\n        const toB = toCam.bstar;\n        const jstar = fromJ + (toJ - fromJ) * amount;\n        const astar = fromA + (toA - fromA) * amount;\n        const bstar = fromB + (toB - fromB) * amount;\n        return Cam16.fromUcs(jstar, astar, bstar).toInt();\n    }\n}\n//# sourceMappingURL=blend.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport class Contrast {\n    /**\n     * Returns a contrast ratio, which ranges from 1 to 21.\n     *\n     * @param toneA Tone between 0 and 100. Values outside will be clamped.\n     * @param toneB Tone between 0 and 100. Values outside will be clamped.\n     */\n    static ratioOfTones(toneA, toneB) {\n        toneA = math.clampDouble(0.0, 100.0, toneA);\n        toneB = math.clampDouble(0.0, 100.0, toneB);\n        return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n    }\n    static ratioOfYs(y1, y2) {\n        const lighter = y1 > y2 ? y1 : y2;\n        const darker = (lighter === y2) ? y1 : y2;\n        return (lighter + 5.0) / (darker + 5.0);\n    }\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n    static lighter(tone, ratio) {\n        if (tone < 0.0 || tone > 100.0) {\n            return -1.0;\n        }\n        const darkY = utils.yFromLstar(tone);\n        const lightY = ratio * (darkY + 5.0) - 5.0;\n        const realContrast = Contrast.ratioOfYs(lightY, darkY);\n        const delta = Math.abs(realContrast - ratio);\n        if (realContrast < ratio && delta > 0.04) {\n            return -1;\n        }\n        // Ensure gamut mapping, which requires a 'range' on tone, will still result\n        // the correct ratio by darkening slightly.\n        const returnValue = utils.lstarFromY(lightY) + 0.4;\n        if (returnValue < 0 || returnValue > 100) {\n            return -1;\n        }\n        return returnValue;\n    }\n    /**\n     * Returns a tone <= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n    static darker(tone, ratio) {\n        if (tone < 0.0 || tone > 100.0) {\n            return -1.0;\n        }\n        const lightY = utils.yFromLstar(tone);\n        const darkY = ((lightY + 5.0) / ratio) - 5.0;\n        const realContrast = Contrast.ratioOfYs(lightY, darkY);\n        const delta = Math.abs(realContrast - ratio);\n        if (realContrast < ratio && delta > 0.04) {\n            return -1;\n        }\n        // Ensure gamut mapping, which requires a 'range' on tone, will still result\n        // the correct ratio by darkening slightly.\n        const returnValue = utils.lstarFromY(darkY) - 0.4;\n        if (returnValue < 0 || returnValue > 100) {\n            return -1;\n        }\n        return returnValue;\n    }\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the ratio with tone. For example, there is no color lighter than T100.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 100 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n    static lighterUnsafe(tone, ratio) {\n        const lighterSafe = Contrast.lighter(tone, ratio);\n        return (lighterSafe < 0.0) ? 100.0 : lighterSafe;\n    }\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the [ratio with [tone]. For example, there is no color darker than T0.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 0 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n    static darkerUnsafe(tone, ratio) {\n        const darkerSafe = Contrast.darker(tone, ratio);\n        return (darkerSafe < 0.0) ? 0.0 : darkerSafe;\n    }\n}\n//# sourceMappingURL=contrast.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct.js';\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * Check and/or fix universally disliked colors.\n * Color science studies of color preference indicate universal distaste for\n * dark yellow-greens, and also show this is correlated to distate for\n * biological waste and rotting food.\n *\n * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook\n * of Color Psychology (2015).\n */\nexport class DislikeAnalyzer {\n    /**\n     * Returns true if a color is disliked.\n     *\n     * @param hct A color to be judged.\n     * @return Whether the color is disliked.\n     *\n     * Disliked is defined as a dark yellow-green that is not neutral.\n     */\n    static isDisliked(hct) {\n        const huePasses = Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;\n        const chromaPasses = Math.round(hct.chroma) > 16.0;\n        const tonePasses = Math.round(hct.tone) < 65.0;\n        return huePasses && chromaPasses && tonePasses;\n    }\n    /**\n     * If a color is disliked, lighten it to make it likable.\n     *\n     * @param hct A color to be judged.\n     * @return A new color if the original color is disliked, or the original\n     *   color if it is acceptable.\n     */\n    static fixIfDisliked(hct) {\n        if (DislikeAnalyzer.isDisliked(hct)) {\n            return Hct.from(hct.hue, hct.chroma, 70.0);\n        }\n        return hct;\n    }\n}\n//# sourceMappingURL=dislike_analyzer.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as math from '../utils/math_utils.js';\n/**\n * A class containing the contrast curve for a dynamic color on its background.\n *\n * The four values correspond to contrast requirements for contrast levels\n * -1.0, 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n    /**\n     * Creates a `ContrastCurve` object.\n     *\n     * @param low Contrast requirement for contrast level -1.0\n     * @param normal Contrast requirement for contrast level 0.0\n     * @param medium Contrast requirement for contrast level 0.5\n     * @param high Contrast requirement for contrast level 1.0\n     */\n    constructor(low, normal, medium, high) {\n        this.low = low;\n        this.normal = normal;\n        this.medium = medium;\n        this.high = high;\n    }\n    /**\n     * Returns the contrast ratio at a given contrast level.\n     *\n     * @param contrastLevel The contrast level. 0.0 is the default (normal);\n     * -1.0 is the lowest; 1.0 is the highest.\n     * @return The contrast ratio, a number between 1.0 and 21.0.\n     */\n    getContrast(contrastLevel) {\n        if (contrastLevel <= -1.0) {\n            return this.low;\n        }\n        else if (contrastLevel < 0.0) {\n            return math.lerp(this.low, this.normal, (contrastLevel - (-1)) / 1);\n        }\n        else if (contrastLevel < 0.5) {\n            return math.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n        }\n        else if (contrastLevel < 1.0) {\n            return math.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n        }\n        else {\n            return this.high;\n        }\n    }\n}\n//# sourceMappingURL=contrast_curve.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Contrast } from '../contrast/contrast.js';\nimport * as math from '../utils/math_utils.js';\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n    /**\n     * Create a DynamicColor defined by a TonalPalette and HCT tone.\n     *\n     * @param args Functions with DynamicScheme as input. Must provide a palette\n     * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n     */\n    static fromPalette(args) {\n        return new DynamicColor(args.name ?? '', args.palette, args.tone, args.isBackground ?? false, args.background, args.secondBackground, args.contrastCurve, args.toneDeltaPair);\n    }\n    /**\n     * The base constructor for DynamicColor.\n     *\n     * _Strongly_ prefer using one of the convenience constructors. This class is\n     * arguably too flexible to ensure it can support any scenario. Functional\n     * arguments allow  overriding without risks that come with subclasses.\n     *\n     * For example, the default behavior of adjust tone at max contrast\n     * to be at a 7.0 ratio with its background is principled and\n     * matches accessibility guidance. That does not mean it's the desired\n     * approach for _every_ design system, and every color pairing,\n     * always, in every case.\n     *\n     * @param name The name of the dynamic color. Defaults to empty.\n     * @param palette Function that provides a TonalPalette given\n     * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n     * replaces the need to specify hue/chroma. By providing a tonal palette, when\n     * contrast adjustments are made, intended chroma can be preserved.\n     * @param tone Function that provides a tone, given a DynamicScheme.\n     * @param isBackground Whether this dynamic color is a background, with\n     * some other color as the foreground. Defaults to false.\n     * @param background The background of the dynamic color (as a function of a\n     *     `DynamicScheme`), if it exists.\n     * @param secondBackground A second background of the dynamic color (as a\n     *     function of a `DynamicScheme`), if it\n     * exists.\n     * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n     * against its background should behave in various contrast levels options.\n     * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n     * constraint between two colors. One of them must be the color being\n     * constructed.\n     */\n    constructor(name, palette, tone, isBackground, background, secondBackground, contrastCurve, toneDeltaPair) {\n        this.name = name;\n        this.palette = palette;\n        this.tone = tone;\n        this.isBackground = isBackground;\n        this.background = background;\n        this.secondBackground = secondBackground;\n        this.contrastCurve = contrastCurve;\n        this.toneDeltaPair = toneDeltaPair;\n        this.hctCache = new Map();\n        if ((!background) && secondBackground) {\n            throw new Error(`Color ${name} has secondBackground` +\n                `defined, but background is not defined.`);\n        }\n        if ((!background) && contrastCurve) {\n            throw new Error(`Color ${name} has contrastCurve` +\n                `defined, but background is not defined.`);\n        }\n        if (background && !contrastCurve) {\n            throw new Error(`Color ${name} has background` +\n                `defined, but contrastCurve is not defined.`);\n        }\n    }\n    /**\n     * Return a ARGB integer (i.e. a hex code).\n     *\n     * @param scheme Defines the conditions of the user interface, for example,\n     * whether or not it is dark mode or light mode, and what the desired\n     * contrast level is.\n     */\n    getArgb(scheme) {\n        return this.getHct(scheme).toInt();\n    }\n    /**\n     * Return a color, expressed in the HCT color space, that this\n     * DynamicColor is under the conditions in scheme.\n     *\n     * @param scheme Defines the conditions of the user interface, for example,\n     * whether or not it is dark mode or light mode, and what the desired\n     * contrast level is.\n     */\n    getHct(scheme) {\n        const cachedAnswer = this.hctCache.get(scheme);\n        if (cachedAnswer != null) {\n            return cachedAnswer;\n        }\n        const tone = this.getTone(scheme);\n        const answer = this.palette(scheme).getHct(tone);\n        if (this.hctCache.size > 4) {\n            this.hctCache.clear();\n        }\n        this.hctCache.set(scheme, answer);\n        return answer;\n    }\n    /**\n     * Return a tone, T in the HCT color space, that this DynamicColor is under\n     * the conditions in scheme.\n     *\n     * @param scheme Defines the conditions of the user interface, for example,\n     * whether or not it is dark mode or light mode, and what the desired\n     * contrast level is.\n     */\n    getTone(scheme) {\n        const decreasingContrast = scheme.contrastLevel < 0;\n        // Case 1: dual foreground, pair of colors with delta constraint.\n        if (this.toneDeltaPair) {\n            const toneDeltaPair = this.toneDeltaPair(scheme);\n            const roleA = toneDeltaPair.roleA;\n            const roleB = toneDeltaPair.roleB;\n            const delta = toneDeltaPair.delta;\n            const polarity = toneDeltaPair.polarity;\n            const stayTogether = toneDeltaPair.stayTogether;\n            const bg = this.background(scheme);\n            const bgTone = bg.getTone(scheme);\n            const aIsNearer = (polarity === 'nearer' ||\n                (polarity === 'lighter' && !scheme.isDark) ||\n                (polarity === 'darker' && scheme.isDark));\n            const nearer = aIsNearer ? roleA : roleB;\n            const farther = aIsNearer ? roleB : roleA;\n            const amNearer = this.name === nearer.name;\n            const expansionDir = scheme.isDark ? 1 : -1;\n            // 1st round: solve to min, each\n            const nContrast = nearer.contrastCurve.getContrast(scheme.contrastLevel);\n            const fContrast = farther.contrastCurve.getContrast(scheme.contrastLevel);\n            // If a color is good enough, it is not adjusted.\n            // Initial and adjusted tones for `nearer`\n            const nInitialTone = nearer.tone(scheme);\n            let nTone = Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast ?\n                nInitialTone :\n                DynamicColor.foregroundTone(bgTone, nContrast);\n            // Initial and adjusted tones for `farther`\n            const fInitialTone = farther.tone(scheme);\n            let fTone = Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast ?\n                fInitialTone :\n                DynamicColor.foregroundTone(bgTone, fContrast);\n            if (decreasingContrast) {\n                // If decreasing contrast, adjust color to the \"bare minimum\"\n                // that satisfies contrast.\n                nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n                fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n            }\n            if ((fTone - nTone) * expansionDir >= delta) {\n                // Good! Tones satisfy the constraint; no change needed.\n            }\n            else {\n                // 2nd round: expand farther to match delta.\n                fTone = math.clampDouble(0, 100, nTone + delta * expansionDir);\n                if ((fTone - nTone) * expansionDir >= delta) {\n                    // Good! Tones now satisfy the constraint; no change needed.\n                }\n                else {\n                    // 3rd round: contract nearer to match delta.\n                    nTone = math.clampDouble(0, 100, fTone - delta * expansionDir);\n                }\n            }\n            // Avoids the 50-59 awkward zone.\n            if (50 <= nTone && nTone < 60) {\n                // If `nearer` is in the awkward zone, move it away, together with\n                // `farther`.\n                if (expansionDir > 0) {\n                    nTone = 60;\n                    fTone = Math.max(fTone, nTone + delta * expansionDir);\n                }\n                else {\n                    nTone = 49;\n                    fTone = Math.min(fTone, nTone + delta * expansionDir);\n                }\n            }\n            else if (50 <= fTone && fTone < 60) {\n                if (stayTogether) {\n                    // Fixes both, to avoid two colors on opposite sides of the \"awkward\n                    // zone\".\n                    if (expansionDir > 0) {\n                        nTone = 60;\n                        fTone = Math.max(fTone, nTone + delta * expansionDir);\n                    }\n                    else {\n                        nTone = 49;\n                        fTone = Math.min(fTone, nTone + delta * expansionDir);\n                    }\n                }\n                else {\n                    // Not required to stay together; fixes just one.\n                    if (expansionDir > 0) {\n                        fTone = 60;\n                    }\n                    else {\n                        fTone = 49;\n                    }\n                }\n            }\n            // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n            return amNearer ? nTone : fTone;\n        }\n        else {\n            // Case 2: No contrast pair; just solve for itself.\n            let answer = this.tone(scheme);\n            if (this.background == null) {\n                return answer; // No adjustment for colors with no background.\n            }\n            const bgTone = this.background(scheme).getTone(scheme);\n            const desiredRatio = this.contrastCurve.getContrast(scheme.contrastLevel);\n            if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n                // Don't \"improve\" what's good enough.\n            }\n            else {\n                // Rough improvement.\n                answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n            }\n            if (decreasingContrast) {\n                answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n            }\n            if (this.isBackground && 50 <= answer && answer < 60) {\n                // Must adjust\n                if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n                    answer = 49;\n                }\n                else {\n                    answer = 60;\n                }\n            }\n            if (this.secondBackground) {\n                // Case 3: Adjust for dual backgrounds.\n                const [bg1, bg2] = [this.background, this.secondBackground];\n                const [bgTone1, bgTone2] = [bg1(scheme).getTone(scheme), bg2(scheme).getTone(scheme)];\n                const [upper, lower] = [Math.max(bgTone1, bgTone2), Math.min(bgTone1, bgTone2)];\n                if (Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n                    Contrast.ratioOfTones(lower, answer) >= desiredRatio) {\n                    return answer;\n                }\n                // The darkest light tone that satisfies the desired ratio,\n                // or -1 if such ratio cannot be reached.\n                const lightOption = Contrast.lighter(upper, desiredRatio);\n                // The lightest dark tone that satisfies the desired ratio,\n                // or -1 if such ratio cannot be reached.\n                const darkOption = Contrast.darker(lower, desiredRatio);\n                // Tones suitable for the foreground.\n                const availables = [];\n                if (lightOption !== -1)\n                    availables.push(lightOption);\n                if (darkOption !== -1)\n                    availables.push(darkOption);\n                const prefersLight = DynamicColor.tonePrefersLightForeground(bgTone1) ||\n                    DynamicColor.tonePrefersLightForeground(bgTone2);\n                if (prefersLight) {\n                    return (lightOption < 0) ? 100 : lightOption;\n                }\n                if (availables.length === 1) {\n                    return availables[0];\n                }\n                return (darkOption < 0) ? 0 : darkOption;\n            }\n            return answer;\n        }\n    }\n    /**\n     * Given a background tone, find a foreground tone, while ensuring they reach\n     * a contrast ratio that is as close to [ratio] as possible.\n     *\n     * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n     *     falls outside that range.\n     * @param ratio The contrast ratio desired between bgTone and the return\n     *     value.\n     */\n    static foregroundTone(bgTone, ratio) {\n        const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n        const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n        const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n        const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n        const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n        if (preferLighter) {\n            // This handles an edge case where the initial contrast ratio is high\n            // (ex. 13.0), and the ratio passed to the function is that high\n            // ratio, and both the lighter and darker ratio fails to pass that\n            // ratio.\n            //\n            // This was observed with Tonal Spot's On Primary Container turning\n            // black momentarily between high and max contrast in light mode. PC's\n            // standard tone was T90, OPC's was T10, it was light mode, and the\n            // contrast value was 0.6568521221032331.\n            const negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n                lighterRatio < ratio && darkerRatio < ratio;\n            return lighterRatio >= ratio || lighterRatio >= darkerRatio ||\n                negligibleDifference ?\n                lighterTone :\n                darkerTone;\n        }\n        else {\n            return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone :\n                lighterTone;\n        }\n    }\n    /**\n     * Returns whether [tone] prefers a light foreground.\n     *\n     * People prefer white foregrounds on ~T60-70. Observed over time, and also\n     * by Andrew Somers during research for APCA.\n     *\n     * T60 used as to create the smallest discontinuity possible when skipping\n     * down to T49 in order to ensure light foregrounds.\n     * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n     * 60, it should not be adjusted. Therefore, 60 is excluded here.\n     */\n    static tonePrefersLightForeground(tone) {\n        return Math.round(tone) < 60.0;\n    }\n    /**\n     * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n     * color.\n     */\n    static toneAllowsLightForeground(tone) {\n        return Math.round(tone) <= 49.0;\n    }\n    /**\n     * Adjust a tone such that white has 4.5 contrast, if the tone is\n     * reasonably close to supporting it.\n     */\n    static enableLightForeground(tone) {\n        if (DynamicColor.tonePrefersLightForeground(tone) &&\n            !DynamicColor.toneAllowsLightForeground(tone)) {\n            return 49.0;\n        }\n        return tone;\n    }\n}\n//# sourceMappingURL=dynamic_color.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DislikeAnalyzer } from '../dislike/dislike_analyzer.js';\nimport { Hct } from '../hct/hct.js';\nimport { ViewingConditions } from '../hct/viewing_conditions.js';\nimport { Variant } from '../scheme/variant.js';\nimport { ContrastCurve } from './contrast_curve.js';\nimport { DynamicColor } from './dynamic_color.js';\nimport { ToneDeltaPair } from './tone_delta_pair.js';\nfunction isFidelity(scheme) {\n    return scheme.variant === Variant.FIDELITY ||\n        scheme.variant === Variant.CONTENT;\n}\nfunction isMonochrome(scheme) {\n    return scheme.variant === Variant.MONOCHROME;\n}\nfunction findDesiredChromaByTone(hue, chroma, tone, byDecreasingTone) {\n    let answer = tone;\n    let closestToChroma = Hct.from(hue, chroma, tone);\n    if (closestToChroma.chroma < chroma) {\n        let chromaPeak = closestToChroma.chroma;\n        while (closestToChroma.chroma < chroma) {\n            answer += byDecreasingTone ? -1.0 : 1.0;\n            const potentialSolution = Hct.from(hue, chroma, answer);\n            if (chromaPeak > potentialSolution.chroma) {\n                break;\n            }\n            if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n                break;\n            }\n            const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n            const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n            if (potentialDelta < currentDelta) {\n                closestToChroma = potentialSolution;\n            }\n            chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n        }\n    }\n    return answer;\n}\nfunction viewingConditionsForAlbers(scheme) {\n    return ViewingConditions.make(\n    /*whitePoint=*/ undefined, \n    /*adaptingLuminance=*/ undefined, \n    /*backgroundLstar=*/ scheme.isDark ? 30 : 80, \n    /*surround=*/ undefined, \n    /*discountingIlluminant=*/ undefined);\n}\nfunction performAlbers(prealbers, scheme) {\n    const albersd = prealbers.inViewingConditions(viewingConditionsForAlbers(scheme));\n    if (DynamicColor.tonePrefersLightForeground(prealbers.tone) &&\n        !DynamicColor.toneAllowsLightForeground(albersd.tone)) {\n        return DynamicColor.enableLightForeground(prealbers.tone);\n    }\n    else {\n        return DynamicColor.enableLightForeground(albersd.tone);\n    }\n}\n/**\n * DynamicColors for the colors in the Material Design system.\n */\n// Material Color Utilities namespaces the various utilities it provides.\n// tslint:disable-next-line:class-as-namespace\nexport class MaterialDynamicColors {\n    static highestSurface(s) {\n        return s.isDark ? MaterialDynamicColors.surfaceBright :\n            MaterialDynamicColors.surfaceDim;\n    }\n}\nMaterialDynamicColors.contentAccentToneDelta = 15.0;\nMaterialDynamicColors.primaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'primary_palette_key_color',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.primaryPalette.keyColor.tone,\n});\nMaterialDynamicColors.secondaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'secondary_palette_key_color',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.secondaryPalette.keyColor.tone,\n});\nMaterialDynamicColors.tertiaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'tertiary_palette_key_color',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => s.tertiaryPalette.keyColor.tone,\n});\nMaterialDynamicColors.neutralPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_palette_key_color',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.neutralPalette.keyColor.tone,\n});\nMaterialDynamicColors.neutralVariantPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_variant_palette_key_color',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.neutralVariantPalette.keyColor.tone,\n});\nMaterialDynamicColors.background = DynamicColor.fromPalette({\n    name: 'background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n});\nMaterialDynamicColors.onBackground = DynamicColor.fromPalette({\n    name: 'on_background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.background,\n    contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n});\nMaterialDynamicColors.surface = DynamicColor.fromPalette({\n    name: 'surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceDim = DynamicColor.fromPalette({\n    name: 'surface_dim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 87,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceBright = DynamicColor.fromPalette({\n    name: 'surface_bright',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 24 : 98,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceContainerLowest = DynamicColor.fromPalette({\n    name: 'surface_container_lowest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 4 : 100,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceContainerLow = DynamicColor.fromPalette({\n    name: 'surface_container_low',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 10 : 96,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceContainer = DynamicColor.fromPalette({\n    name: 'surface_container',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 12 : 94,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceContainerHigh = DynamicColor.fromPalette({\n    name: 'surface_container_high',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 17 : 92,\n    isBackground: true,\n});\nMaterialDynamicColors.surfaceContainerHighest = DynamicColor.fromPalette({\n    name: 'surface_container_highest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 22 : 90,\n    isBackground: true,\n});\nMaterialDynamicColors.onSurface = DynamicColor.fromPalette({\n    name: 'on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.surfaceVariant = DynamicColor.fromPalette({\n    name: 'surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n});\nMaterialDynamicColors.onSurfaceVariant = DynamicColor.fromPalette({\n    name: 'on_surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 80 : 30,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n});\nMaterialDynamicColors.inverseSurface = DynamicColor.fromPalette({\n    name: 'inverse_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 20,\n});\nMaterialDynamicColors.inverseOnSurface = DynamicColor.fromPalette({\n    name: 'inverse_on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 20 : 95,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.outline = DynamicColor.fromPalette({\n    name: 'outline',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 60 : 50,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n});\nMaterialDynamicColors.outlineVariant = DynamicColor.fromPalette({\n    name: 'outline_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 80,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n});\nMaterialDynamicColors.shadow = DynamicColor.fromPalette({\n    name: 'shadow',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n});\nMaterialDynamicColors.scrim = DynamicColor.fromPalette({\n    name: 'scrim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n});\nMaterialDynamicColors.surfaceTint = DynamicColor.fromPalette({\n    name: 'surface_tint',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n});\nMaterialDynamicColors.primary = DynamicColor.fromPalette({\n    name: 'primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 100 : 0;\n        }\n        return s.isDark ? 80 : 40;\n    },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onPrimary = DynamicColor.fromPalette({\n    name: 'on_primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n    },\n    background: (s) => MaterialDynamicColors.primary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.primaryContainer = DynamicColor.fromPalette({\n    name: 'primary_container',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => {\n        if (isFidelity(s)) {\n            return performAlbers(s.sourceColorHct, s);\n        }\n        if (isMonochrome(s)) {\n            return s.isDark ? 85 : 25;\n        }\n        return s.isDark ? 30 : 90;\n    },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onPrimaryContainer = DynamicColor.fromPalette({\n    name: 'on_primary_container',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => {\n        if (isFidelity(s)) {\n            return DynamicColor.foregroundTone(MaterialDynamicColors.primaryContainer.tone(s), 4.5);\n        }\n        if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n        }\n        return s.isDark ? 90 : 10;\n    },\n    background: (s) => MaterialDynamicColors.primaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.inversePrimary = DynamicColor.fromPalette({\n    name: 'inverse_primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 40 : 80,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n});\nMaterialDynamicColors.secondary = DynamicColor.fromPalette({\n    name: 'secondary',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.secondaryContainer, MaterialDynamicColors.secondary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onSecondary = DynamicColor.fromPalette({\n    name: 'on_secondary',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 10 : 100;\n        }\n        else {\n            return s.isDark ? 20 : 100;\n        }\n    },\n    background: (s) => MaterialDynamicColors.secondary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.secondaryContainer = DynamicColor.fromPalette({\n    name: 'secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => {\n        const initialTone = s.isDark ? 30 : 90;\n        if (isMonochrome(s)) {\n            return s.isDark ? 30 : 85;\n        }\n        if (!isFidelity(s)) {\n            return initialTone;\n        }\n        let answer = findDesiredChromaByTone(s.secondaryPalette.hue, s.secondaryPalette.chroma, initialTone, s.isDark ? false : true);\n        answer = performAlbers(s.secondaryPalette.getHct(answer), s);\n        return answer;\n    },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.secondaryContainer, MaterialDynamicColors.secondary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onSecondaryContainer = DynamicColor.fromPalette({\n    name: 'on_secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => {\n        if (!isFidelity(s)) {\n            return s.isDark ? 90 : 10;\n        }\n        return DynamicColor.foregroundTone(MaterialDynamicColors.secondaryContainer.tone(s), 4.5);\n    },\n    background: (s) => MaterialDynamicColors.secondaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.tertiary = DynamicColor.fromPalette({\n    name: 'tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 90 : 25;\n        }\n        return s.isDark ? 80 : 40;\n    },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onTertiary = DynamicColor.fromPalette({\n    name: 'on_tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n    },\n    background: (s) => MaterialDynamicColors.tertiary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.tertiaryContainer = DynamicColor.fromPalette({\n    name: 'tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 60 : 49;\n        }\n        if (!isFidelity(s)) {\n            return s.isDark ? 30 : 90;\n        }\n        const albersTone = performAlbers(s.tertiaryPalette.getHct(s.sourceColorHct.tone), s);\n        const proposedHct = s.tertiaryPalette.getHct(albersTone);\n        return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n    },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary, 15, 'nearer', false),\n});\nMaterialDynamicColors.onTertiaryContainer = DynamicColor.fromPalette({\n    name: 'on_tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => {\n        if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n        }\n        if (!isFidelity(s)) {\n            return s.isDark ? 90 : 10;\n        }\n        return DynamicColor.foregroundTone(MaterialDynamicColors.tertiaryContainer.tone(s), 4.5);\n    },\n    background: (s) => MaterialDynamicColors.tertiaryContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.error = DynamicColor.fromPalette({\n    name: 'error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 15, 'nearer', false),\n});\nMaterialDynamicColors.onError = DynamicColor.fromPalette({\n    name: 'on_error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 20 : 100,\n    background: (s) => MaterialDynamicColors.error,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.errorContainer = DynamicColor.fromPalette({\n    name: 'error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 15, 'nearer', false),\n});\nMaterialDynamicColors.onErrorContainer = DynamicColor.fromPalette({\n    name: 'on_error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.errorContainer,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.primaryFixed = DynamicColor.fromPalette({\n    name: 'primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.primaryFixed, MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.primaryFixedDim = DynamicColor.fromPalette({\n    name: 'primary_fixed_dim',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.primaryFixed, MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.onPrimaryFixed = DynamicColor.fromPalette({\n    name: 'on_primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.onPrimaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_primary_fixed_variant',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n});\nMaterialDynamicColors.secondaryFixed = DynamicColor.fromPalette({\n    name: 'secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 80.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.secondaryFixed, MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.secondaryFixedDim = DynamicColor.fromPalette({\n    name: 'secondary_fixed_dim',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 70.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.secondaryFixed, MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.onSecondaryFixed = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => 10.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.onSecondaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed_variant',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 25.0 : 30.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n});\nMaterialDynamicColors.tertiaryFixed = DynamicColor.fromPalette({\n    name: 'tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.tertiaryFixed, MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.tertiaryFixedDim = DynamicColor.fromPalette({\n    name: 'tertiary_fixed_dim',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(MaterialDynamicColors.tertiaryFixed, MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n});\nMaterialDynamicColors.onTertiaryFixed = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n});\nMaterialDynamicColors.onTertiaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed_variant',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n});\n//# sourceMappingURL=material_dynamic_colors.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n    /**\n     * Documents a constraint in tone distance between two DynamicColors.\n     *\n     * The polarity is an adjective that describes \"A\", compared to \"B\".\n     *\n     * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n     * A's tone should be at least 15 darker than B's.\n     *\n     * 'nearer' and 'farther' describes closeness to the surface roles. For\n     * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n     * should be 10 lighter than B in light mode, and 10 darker than B in dark\n     * mode.\n     *\n     * @param roleA The first role in a pair.\n     * @param roleB The second role in a pair.\n     * @param delta Required difference between tones. Absolute value, negative\n     * values have undefined behavior.\n     * @param polarity The relative relation between tones of roleA and roleB,\n     * as described above.\n     * @param stayTogether Whether these two roles should stay on the same side of\n     * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n     * one role has two backgrounds.\n     */\n    constructor(roleA, roleB, delta, polarity, stayTogether) {\n        this.roleA = roleA;\n        this.roleB = roleB;\n        this.delta = delta;\n        this.polarity = polarity;\n        this.stayTogether = stayTogether;\n    }\n}\n//# sourceMappingURL=tone_delta_pair.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\nimport { ViewingConditions } from './viewing_conditions.js';\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n    /**\n     * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n     * the following combinations:\n     *      -  {j or q} and {c, m, or s} and hue\n     *      - jstar, astar, bstar\n     * Prefer using a static method that constructs from 3 of those dimensions.\n     * This constructor is intended for those methods to use to return all\n     * possible dimensions.\n     *\n     * @param hue\n     * @param chroma informally, colorfulness / color intensity. like saturation\n     *     in HSL, except perceptually accurate.\n     * @param j lightness\n     * @param q brightness; ratio of lightness to white point's lightness\n     * @param m colorfulness\n     * @param s saturation; ratio of chroma to white point's chroma\n     * @param jstar CAM16-UCS J coordinate\n     * @param astar CAM16-UCS a coordinate\n     * @param bstar CAM16-UCS b coordinate\n     */\n    constructor(hue, chroma, j, q, m, s, jstar, astar, bstar) {\n        this.hue = hue;\n        this.chroma = chroma;\n        this.j = j;\n        this.q = q;\n        this.m = m;\n        this.s = s;\n        this.jstar = jstar;\n        this.astar = astar;\n        this.bstar = bstar;\n    }\n    /**\n     * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n     * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n     * specification, and is used to measure distances between colors.\n     */\n    distance(other) {\n        const dJ = this.jstar - other.jstar;\n        const dA = this.astar - other.astar;\n        const dB = this.bstar - other.bstar;\n        const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n        const dE = 1.41 * Math.pow(dEPrime, 0.63);\n        return dE;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return CAM16 color, assuming the color was viewed in default viewing\n     *     conditions.\n     */\n    static fromInt(argb) {\n        return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     * @return CAM16 color.\n     */\n    static fromIntInViewingConditions(argb, viewingConditions) {\n        const red = (argb & 0x00ff0000) >> 16;\n        const green = (argb & 0x0000ff00) >> 8;\n        const blue = (argb & 0x000000ff);\n        const redL = utils.linearized(red);\n        const greenL = utils.linearized(green);\n        const blueL = utils.linearized(blue);\n        const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n        const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n        const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n        const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n        const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n        const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n        const rD = viewingConditions.rgbD[0] * rC;\n        const gD = viewingConditions.rgbD[1] * gC;\n        const bD = viewingConditions.rgbD[2] * bC;\n        const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n        const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n        const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n        const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n        const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n        const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n        const b = (rA + gA - 2.0 * bA) / 9.0;\n        const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n        const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n        const atan2 = Math.atan2(b, a);\n        const atanDegrees = (atan2 * 180.0) / Math.PI;\n        const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n            atanDegrees >= 360 ? atanDegrees - 360.0 :\n                atanDegrees;\n        const hueRadians = (hue * Math.PI) / 180.0;\n        const ac = p2 * viewingConditions.nbb;\n        const j = 100.0 *\n            Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n        const huePrime = hue < 20.14 ? hue + 360 : hue;\n        const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n        const p1 = (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n        const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n        const alpha = Math.pow(t, 0.9) *\n            Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n        const c = alpha * Math.sqrt(j / 100.0);\n        const m = c * viewingConditions.fLRoot;\n        const s = 50.0 *\n            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n        const astar = mstar * Math.cos(hueRadians);\n        const bstar = mstar * Math.sin(hueRadians);\n        return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n    }\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     */\n    static fromJch(j, c, h) {\n        return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n    static fromJchInViewingConditions(j, c, h, viewingConditions) {\n        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n        const m = c * viewingConditions.fLRoot;\n        const alpha = c / Math.sqrt(j / 100.0);\n        const s = 50.0 *\n            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n        const hueRadians = (h * Math.PI) / 180.0;\n        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n        const astar = mstar * Math.cos(hueRadians);\n        const bstar = mstar * Math.sin(hueRadians);\n        return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n    }\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     */\n    static fromUcs(jstar, astar, bstar) {\n        return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n    static fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {\n        const a = astar;\n        const b = bstar;\n        const m = Math.sqrt(a * a + b * b);\n        const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n        const c = M / viewingConditions.fLRoot;\n        let h = Math.atan2(b, a) * (180.0 / Math.PI);\n        if (h < 0.0) {\n            h += 360.0;\n        }\n        const j = jstar / (1 - (jstar - 100) * 0.007);\n        return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n    }\n    /**\n     *  @return ARGB representation of color, assuming the color was viewed in\n     *     default viewing conditions, which are near-identical to the default\n     *     viewing conditions for sRGB.\n     */\n    toInt() {\n        return this.viewed(ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param viewingConditions Information about the environment where the color\n     *     will be viewed.\n     * @return ARGB representation of color\n     */\n    viewed(viewingConditions) {\n        const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n            0.0 :\n            this.chroma / Math.sqrt(this.j / 100.0);\n        const t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n        const hRad = (this.hue * Math.PI) / 180.0;\n        const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n        const ac = viewingConditions.aw *\n            Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n        const p2 = ac / viewingConditions.nbb;\n        const hSin = Math.sin(hRad);\n        const hCos = Math.cos(hRad);\n        const gamma = (23.0 * (p2 + 0.305) * t) /\n            (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n        const a = gamma * hCos;\n        const b = gamma * hSin;\n        const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n        const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n            Math.pow(rCBase, 1.0 / 0.42);\n        const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n        const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n            Math.pow(gCBase, 1.0 / 0.42);\n        const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n        const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n            Math.pow(bCBase, 1.0 / 0.42);\n        const rF = rC / viewingConditions.rgbD[0];\n        const gF = gC / viewingConditions.rgbD[1];\n        const bF = bC / viewingConditions.rgbD[2];\n        const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n        const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n        const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n        const argb = utils.argbFromXyz(x, y, z);\n        return argb;\n    }\n    /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n    /// CAM16.\n    static fromXyzInViewingConditions(x, y, z, viewingConditions) {\n        // Transform XYZ to 'cone'/'rgb' responses\n        const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n        const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n        const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n        // Discount illuminant\n        const rD = viewingConditions.rgbD[0] * rC;\n        const gD = viewingConditions.rgbD[1] * gC;\n        const bD = viewingConditions.rgbD[2] * bC;\n        // chromatic adaptation\n        const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n        const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n        const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n        const rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n        const gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n        const bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n        // redness-greenness\n        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n        // yellowness-blueness\n        const b = (rA + gA - 2.0 * bA) / 9.0;\n        // auxiliary components\n        const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n        const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n        // hue\n        const atan2 = Math.atan2(b, a);\n        const atanDegrees = atan2 * 180.0 / Math.PI;\n        const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n            atanDegrees >= 360 ? atanDegrees - 360 :\n                atanDegrees;\n        const hueRadians = hue * Math.PI / 180.0;\n        // achromatic response to color\n        const ac = p2 * viewingConditions.nbb;\n        // CAM16 lightness and brightness\n        const J = 100.0 *\n            Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n        const Q = (4.0 / viewingConditions.c) * Math.sqrt(J / 100.0) *\n            (viewingConditions.aw + 4.0) * (viewingConditions.fLRoot);\n        const huePrime = (hue < 20.14) ? hue + 360 : hue;\n        const eHue = (1.0 / 4.0) * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n        const p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n        const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n        const alpha = Math.pow(t, 0.9) *\n            Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n        // CAM16 chroma, colorfulness, chroma\n        const C = alpha * Math.sqrt(J / 100.0);\n        const M = C * viewingConditions.fLRoot;\n        const s = 50.0 *\n            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n        // CAM16-UCS components\n        const jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n        const mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n        const astar = mstar * Math.cos(hueRadians);\n        const bstar = mstar * Math.sin(hueRadians);\n        return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n    }\n    /// XYZ representation of CAM16 seen in [viewingConditions].\n    xyzInViewingConditions(viewingConditions) {\n        const alpha = (this.chroma === 0.0 || this.j === 0.0) ?\n            0.0 :\n            this.chroma / Math.sqrt(this.j / 100.0);\n        const t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n        const hRad = this.hue * Math.PI / 180.0;\n        const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n        const ac = viewingConditions.aw *\n            Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n        const p2 = (ac / viewingConditions.nbb);\n        const hSin = Math.sin(hRad);\n        const hCos = Math.cos(hRad);\n        const gamma = 23.0 * (p2 + 0.305) * t /\n            (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n        const a = gamma * hCos;\n        const b = gamma * hSin;\n        const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n        const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n            Math.pow(rCBase, 1.0 / 0.42);\n        const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n        const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n            Math.pow(gCBase, 1.0 / 0.42);\n        const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n        const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n            Math.pow(bCBase, 1.0 / 0.42);\n        const rF = rC / viewingConditions.rgbD[0];\n        const gF = gC / viewingConditions.rgbD[1];\n        const bF = bC / viewingConditions.rgbD[2];\n        const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n        const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n        const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n        return [x, y, z];\n    }\n}\n//# sourceMappingURL=cam16.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\nimport * as utils from '../utils/color_utils.js';\nimport { Cam16 } from './cam16.js';\nimport { HctSolver } from './hct_solver.js';\nimport { ViewingConditions } from './viewing_conditions.js';\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n    static from(hue, chroma, tone) {\n        return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return HCT representation of a color in default viewing conditions\n     */\n    static fromInt(argb) {\n        return new Hct(argb);\n    }\n    toInt() {\n        return this.argb;\n    }\n    /**\n     * A number, in degrees, representing ex. red, orange, yellow, etc.\n     * Ranges from 0 <= hue < 360.\n     */\n    get hue() {\n        return this.internalHue;\n    }\n    /**\n     * @param newHue 0 <= newHue < 360; invalid values are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set hue(newHue) {\n        this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));\n    }\n    get chroma() {\n        return this.internalChroma;\n    }\n    /**\n     * @param newChroma 0 <= newChroma < ?\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set chroma(newChroma) {\n        this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));\n    }\n    /** Lightness. Ranges from 0 to 100. */\n    get tone() {\n        return this.internalTone;\n    }\n    /**\n     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set tone(newTone) {\n        this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));\n    }\n    constructor(argb) {\n        this.argb = argb;\n        const cam = Cam16.fromInt(argb);\n        this.internalHue = cam.hue;\n        this.internalChroma = cam.chroma;\n        this.internalTone = utils.lstarFromArgb(argb);\n        this.argb = argb;\n    }\n    setInternalState(argb) {\n        const cam = Cam16.fromInt(argb);\n        this.internalHue = cam.hue;\n        this.internalChroma = cam.chroma;\n        this.internalTone = utils.lstarFromArgb(argb);\n        this.argb = argb;\n    }\n    /**\n     * Translates a color into different [ViewingConditions].\n     *\n     * Colors change appearance. They look different with lights on versus off,\n     * the same color, as in hex code, on white looks different when on black.\n     * This is called color relativity, most famously explicated by Josef Albers\n     * in Interaction of Color.\n     *\n     * In color science, color appearance models can account for this and\n     * calculate the appearance of a color in different settings. HCT is based on\n     * CAM16, a color appearance model, and uses it to make these calculations.\n     *\n     * See [ViewingConditions.make] for parameters affecting color appearance.\n     */\n    inViewingConditions(vc) {\n        // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n        const cam = Cam16.fromInt(this.toInt());\n        const viewedInVc = cam.xyzInViewingConditions(vc);\n        // 2. Create CAM16 of those XYZ coordinates in default VC.\n        const recastInVc = Cam16.fromXyzInViewingConditions(viewedInVc[0], viewedInVc[1], viewedInVc[2], ViewingConditions.make());\n        // 3. Create HCT from:\n        // - CAM16 using default VC with XYZ coordinates in specified VC.\n        // - L* converted from Y in XYZ coordinates in specified VC.\n        const recastHct = Hct.from(recastInVc.hue, recastInVc.chroma, utils.lstarFromY(viewedInVc[1]));\n        return recastHct;\n    }\n}\n//# sourceMappingURL=hct.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\nimport { Cam16 } from './cam16.js';\nimport { ViewingConditions } from './viewing_conditions.js';\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n    /**\n     * Sanitizes a small enough angle in radians.\n     *\n     * @param angle An angle in radians; must not deviate too much\n     * from 0.\n     * @return A coterminal angle between 0 and 2pi.\n     */\n    static sanitizeRadians(angle) {\n        return (angle + Math.PI * 8) % (Math.PI * 2);\n    }\n    /**\n     * Delinearizes an RGB component, returning a floating-point\n     * number.\n     *\n     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n     * linear R/G/B channel\n     * @return 0.0 <= output <= 255.0, color channel converted to\n     * regular RGB space\n     */\n    static trueDelinearized(rgbComponent) {\n        const normalized = rgbComponent / 100.0;\n        let delinearized = 0.0;\n        if (normalized <= 0.0031308) {\n            delinearized = normalized * 12.92;\n        }\n        else {\n            delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n        }\n        return delinearized * 255.0;\n    }\n    static chromaticAdaptation(component) {\n        const af = Math.pow(Math.abs(component), 0.42);\n        return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n    }\n    /**\n     * Returns the hue of a linear RGB color in CAM16.\n     *\n     * @param linrgb The linear RGB coordinates of a color.\n     * @return The hue of the color in CAM16, in radians.\n     */\n    static hueOf(linrgb) {\n        const scaledDiscount = mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n        const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n        const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n        const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n        // redness-greenness\n        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n        // yellowness-blueness\n        const b = (rA + gA - 2.0 * bA) / 9.0;\n        return Math.atan2(b, a);\n    }\n    static areInCyclicOrder(a, b, c) {\n        const deltaAB = HctSolver.sanitizeRadians(b - a);\n        const deltaAC = HctSolver.sanitizeRadians(c - a);\n        return deltaAB < deltaAC;\n    }\n    /**\n     * Solves the lerp equation.\n     *\n     * @param source The starting number.\n     * @param mid The number in the middle.\n     * @param target The ending number.\n     * @return A number t such that lerp(source, target, t) = mid.\n     */\n    static intercept(source, mid, target) {\n        return (mid - source) / (target - source);\n    }\n    static lerpPoint(source, t, target) {\n        return [\n            source[0] + (target[0] - source[0]) * t,\n            source[1] + (target[1] - source[1]) * t,\n            source[2] + (target[2] - source[2]) * t,\n        ];\n    }\n    /**\n     * Intersects a segment with a plane.\n     *\n     * @param source The coordinates of point A.\n     * @param coordinate The R-, G-, or B-coordinate of the plane.\n     * @param target The coordinates of point B.\n     * @param axis The axis the plane is perpendicular with. (0: R, 1:\n     * G, 2: B)\n     * @return The intersection point of the segment AB with the plane\n     * R=coordinate, G=coordinate, or B=coordinate\n     */\n    static setCoordinate(source, coordinate, target, axis) {\n        const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n        return HctSolver.lerpPoint(source, t, target);\n    }\n    static isBounded(x) {\n        return 0.0 <= x && x <= 100.0;\n    }\n    /**\n     * Returns the nth possible vertex of the polygonal intersection.\n     *\n     * @param y The Y value of the plane.\n     * @param n The zero-based index of the point. 0 <= n <= 11.\n     * @return The nth possible vertex of the polygonal intersection\n     * of the y plane and the RGB cube, in linear RGB coordinates, if\n     * it exists. If this possible vertex lies outside of the cube,\n     * [-1.0, -1.0, -1.0] is returned.\n     */\n    static nthVertex(y, n) {\n        const kR = HctSolver.Y_FROM_LINRGB[0];\n        const kG = HctSolver.Y_FROM_LINRGB[1];\n        const kB = HctSolver.Y_FROM_LINRGB[2];\n        const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n        const coordB = n % 2 === 0 ? 0.0 : 100.0;\n        if (n < 4) {\n            const g = coordA;\n            const b = coordB;\n            const r = (y - g * kG - b * kB) / kR;\n            if (HctSolver.isBounded(r)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n        else if (n < 8) {\n            const b = coordA;\n            const r = coordB;\n            const g = (y - r * kR - b * kB) / kG;\n            if (HctSolver.isBounded(g)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n        else {\n            const r = coordA;\n            const g = coordB;\n            const b = (y - r * kR - g * kG) / kB;\n            if (HctSolver.isBounded(b)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n    }\n    /**\n     * Finds the segment containing the desired color.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return A list of two sets of linear RGB coordinates, each\n     * corresponding to an endpoint of the segment containing the\n     * desired color.\n     */\n    static bisectToSegment(y, targetHue) {\n        let left = [-1.0, -1.0, -1.0];\n        let right = left;\n        let leftHue = 0.0;\n        let rightHue = 0.0;\n        let initialized = false;\n        let uncut = true;\n        for (let n = 0; n < 12; n++) {\n            const mid = HctSolver.nthVertex(y, n);\n            if (mid[0] < 0) {\n                continue;\n            }\n            const midHue = HctSolver.hueOf(mid);\n            if (!initialized) {\n                left = mid;\n                right = mid;\n                leftHue = midHue;\n                rightHue = midHue;\n                initialized = true;\n                continue;\n            }\n            if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n                uncut = false;\n                if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                    right = mid;\n                    rightHue = midHue;\n                }\n                else {\n                    left = mid;\n                    leftHue = midHue;\n                }\n            }\n        }\n        return [left, right];\n    }\n    static midpoint(a, b) {\n        return [\n            (a[0] + b[0]) / 2,\n            (a[1] + b[1]) / 2,\n            (a[2] + b[2]) / 2,\n        ];\n    }\n    static criticalPlaneBelow(x) {\n        return Math.floor(x - 0.5);\n    }\n    static criticalPlaneAbove(x) {\n        return Math.ceil(x - 0.5);\n    }\n    /**\n     * Finds a color with the given Y and hue on the boundary of the\n     * cube.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return The desired color, in linear RGB coordinates.\n     */\n    static bisectToLimit(y, targetHue) {\n        const segment = HctSolver.bisectToSegment(y, targetHue);\n        let left = segment[0];\n        let leftHue = HctSolver.hueOf(left);\n        let right = segment[1];\n        for (let axis = 0; axis < 3; axis++) {\n            if (left[axis] !== right[axis]) {\n                let lPlane = -1;\n                let rPlane = 255;\n                if (left[axis] < right[axis]) {\n                    lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));\n                    rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));\n                }\n                else {\n                    lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));\n                    rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));\n                }\n                for (let i = 0; i < 8; i++) {\n                    if (Math.abs(rPlane - lPlane) <= 1) {\n                        break;\n                    }\n                    else {\n                        const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n                        const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n                        const mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n                        const midHue = HctSolver.hueOf(mid);\n                        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                            right = mid;\n                            rPlane = mPlane;\n                        }\n                        else {\n                            left = mid;\n                            leftHue = midHue;\n                            lPlane = mPlane;\n                        }\n                    }\n                }\n            }\n        }\n        return HctSolver.midpoint(left, right);\n    }\n    static inverseChromaticAdaptation(adapted) {\n        const adaptedAbs = Math.abs(adapted);\n        const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n        return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n    }\n    /**\n     * Finds a color with the given hue, chroma, and Y.\n     *\n     * @param hueRadians The desired hue in radians.\n     * @param chroma The desired chroma.\n     * @param y The desired Y.\n     * @return The desired color as a hexadecimal integer, if found; 0\n     * otherwise.\n     */\n    static findResultByJ(hueRadians, chroma, y) {\n        // Initial estimate of j.\n        let j = Math.sqrt(y) * 11.0;\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        const viewingConditions = ViewingConditions.DEFAULT;\n        const tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n        const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n        const hSin = Math.sin(hueRadians);\n        const hCos = Math.cos(hueRadians);\n        for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n            // ===========================================================\n            // Operations inlined from Cam16 to avoid repeated calculation\n            // ===========================================================\n            const jNormalized = j / 100.0;\n            const alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n            const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n            const ac = viewingConditions.aw *\n                Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n            const p2 = ac / viewingConditions.nbb;\n            const gamma = 23.0 * (p2 + 0.305) * t /\n                (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n            const a = gamma * hCos;\n            const b = gamma * hSin;\n            const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n            const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n            const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n            const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n            const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n            const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n            const linrgb = mathUtils.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);\n            // ===========================================================\n            // Operations inlined from Cam16 to avoid repeated calculation\n            // ===========================================================\n            if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n                return 0;\n            }\n            const kR = HctSolver.Y_FROM_LINRGB[0];\n            const kG = HctSolver.Y_FROM_LINRGB[1];\n            const kB = HctSolver.Y_FROM_LINRGB[2];\n            const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n            if (fnj <= 0) {\n                return 0;\n            }\n            if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n                if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n                    return 0;\n                }\n                return colorUtils.argbFromLinrgb(linrgb);\n            }\n            // Iterates with Newton method,\n            // Using 2 * fn(j) / j as the approximation of fn'(j)\n            j = j - (fnj - y) * j / (2 * fnj);\n        }\n        return 0;\n    }\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return A hexadecimal representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n    static solveToInt(hueDegrees, chroma, lstar) {\n        if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n            return colorUtils.argbFromLstar(lstar);\n        }\n        hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n        const hueRadians = hueDegrees / 180 * Math.PI;\n        const y = colorUtils.yFromLstar(lstar);\n        const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n        if (exactAnswer !== 0) {\n            return exactAnswer;\n        }\n        const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n        return colorUtils.argbFromLinrgb(linrgb);\n    }\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return An CAM16 object representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n    static solveToCam(hueDegrees, chroma, lstar) {\n        return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n    }\n}\nHctSolver.SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n        0.001200833568784504,\n        0.002389694492170889,\n        0.0002795742885861124,\n    ],\n    [\n        0.0005891086651375999,\n        0.0029785502573438758,\n        0.0003270666104008398,\n    ],\n    [\n        0.00010146692491640572,\n        0.0005364214359186694,\n        0.0032979401770712076,\n    ],\n];\nHctSolver.LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n        1373.2198709594231,\n        -1100.4251190754821,\n        -7.278681089101213,\n    ],\n    [\n        -271.815969077903,\n        559.6580465940733,\n        -32.46047482791194,\n    ],\n    [\n        1.9622899599665666,\n        -57.173814538844006,\n        308.7233197812385,\n    ],\n];\nHctSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\nHctSolver.CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,\n    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,\n    0.28835063437139563, 0.3188300904430532, 0.350925934958123,\n    0.3848314933096426, 0.42057480301049466, 0.458183274052838,\n    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,\n    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,\n    0.775853049866786, 0.829304845476233, 0.8848452951698498,\n    0.942497089126609, 1.0022825574869039, 1.0642236851973577,\n    1.1283421258858297, 1.1946592148522128, 1.2631959812511864,\n    1.3339731595349034, 1.407011200216447, 1.4823302800086415,\n    1.5599503113873272, 1.6398909516233677, 1.7221716113234105,\n    1.8068114625156377, 1.8938294463134073, 1.9832442801866852,\n    2.075074464868551, 2.1693382909216234, 2.2660538449872063,\n    2.36523901573795, 2.4669114995532007, 2.5710888059345764,\n    2.6777882626779785, 2.7870270208169257, 2.898822059350997,\n    3.0131901897720907, 3.1301480604002863, 3.2497121605402226,\n    3.3718988244681087, 3.4967242352587946, 3.624204428461639,\n    3.754355295633311, 3.887192587735158, 4.022731918402185,\n    4.160988767090289, 4.301978482107941, 4.445716283538092,\n    4.592217266055746, 4.741496401646282, 4.893568542229298,\n    5.048448422192488, 5.20615066083972, 5.3666897647573375,\n    5.5300801301023865, 5.696336044816294, 5.865471690767354,\n    6.037501145825082, 6.212438385869475, 6.390297286737924,\n    6.571091626112461, 6.7548350853498045, 6.941541251256611,\n    7.131223617812143, 7.323895587840543, 7.5195704746346665,\n    7.7182615035334345, 7.919981813454504, 8.124744458384042,\n    8.332562408825165, 8.543448553206703, 8.757415699253682,\n    8.974476575321063, 9.194643831691977, 9.417930041841839,\n    9.644347703669503, 9.873909240696694, 10.106627003236781,\n    10.342513269534024, 10.58158024687427, 10.8238400726681,\n    11.069304815507364, 11.317986476196008, 11.569896988756009,\n    11.825048221409341, 12.083451977536606, 12.345119996613247,\n    12.610063955123938, 12.878295467455942, 13.149826086772048,\n    13.42466730586372, 13.702830557985108, 13.984327217668513,\n    14.269168601521828, 14.55736596900856, 14.848930523210871,\n    15.143873411576273, 15.44220572664832, 15.743938506781891,\n    16.04908273684337, 16.35764934889634, 16.66964922287304,\n    16.985093187232053, 17.30399201960269, 17.62635644741625,\n    17.95219714852476, 18.281524751807332, 18.614349837764564,\n    18.95068293910138, 19.290534541298456, 19.633915083172692,\n    19.98083495742689, 20.331304511189067, 20.685334046541502,\n    21.042933821039977, 21.404114048223256, 21.76888489811322,\n    22.137256497705877, 22.50923893145328, 22.884842241736916,\n    23.264076429332462, 23.6469514538663, 24.033477234264016,\n    24.42366364919083, 24.817520537484558, 25.21505769858089,\n    25.61628489293138, 26.021211842414342, 26.429848230738664,\n    26.842203703840827, 27.258287870275353, 27.678110301598522,\n    28.10168053274597, 28.529008062403893, 28.96010235337422,\n    29.39497283293396, 29.83362889318845, 30.276079891419332,\n    30.722335150426627, 31.172403958865512, 31.62629557157785,\n    32.08401920991837, 32.54558406207592, 33.010999283389665,\n    33.4802739966603, 33.953417292456834, 34.430438229418264,\n    34.911345834551085, 35.39614910352207, 35.88485700094671,\n    36.37747846067349, 36.87402238606382, 37.37449765026789,\n    37.87891309649659, 38.38727753828926, 38.89959975977785,\n    39.41588851594697, 39.93615253289054, 40.460400508064545,\n    40.98864111053629, 41.520882981230194, 42.05713473317016,\n    42.597404951718396, 43.141702194811224, 43.6900349931913,\n    44.24241185063697, 44.798841244188324, 45.35933162437017,\n    45.92389141541209, 46.49252901546552, 47.065252796817916,\n    47.64207110610409, 48.22299226451468, 48.808024568002054,\n    49.3971762874833, 49.9904556690408, 50.587870934119984,\n    51.189430279724725, 51.79514187861014, 52.40501387947288,\n    53.0190544071392, 53.637271562750364, 54.259673423945976,\n    54.88626804504493, 55.517063457223934, 56.15206766869424,\n    56.79128866487574, 57.43473440856916, 58.08241284012621,\n    58.734331877617365, 59.39049941699807, 60.05092333227251,\n    60.715611475655585, 61.38457167773311, 62.057811747619894,\n    62.7353394731159, 63.417162620860914, 64.10328893648692,\n    64.79372614476921, 65.48848194977529, 66.18756403501224,\n    66.89098006357258, 67.59873767827808, 68.31084450182222,\n    69.02730813691093, 69.74813616640164, 70.47333615344107,\n    71.20291564160104, 71.93688215501312, 72.67524319850172,\n    73.41800625771542, 74.16517879925733, 74.9167682708136,\n    75.67278210128072, 76.43322770089146, 77.1981124613393,\n    77.96744375590167, 78.74122893956174, 79.51947534912904,\n    80.30219030335869, 81.08938110306934, 81.88105503125999,\n    82.67721935322541, 83.4778813166706, 84.28304815182372,\n    85.09272707154808, 85.90692527145302, 86.72564993000343,\n    87.54890820862819, 88.3767072518277, 89.2090541872801,\n    90.04595612594655, 90.88742016217518, 91.73345337380438,\n    92.58406282226491, 93.43925555268066, 94.29903859396902,\n    95.16341895893969, 96.03240364439274, 96.9059996312159,\n    97.78421388448044, 98.6670533535366, 99.55452497210776,\n];\n//# sourceMappingURL=hct_solver.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n    /**\n     * Create ViewingConditions from a simple, physically relevant, set of\n     * parameters.\n     *\n     * @param whitePoint White point, measured in the XYZ color space.\n     *     default = D65, or sunny day afternoon\n     * @param adaptingLuminance The luminance of the adapting field. Informally,\n     *     how bright it is in the room where the color is viewed. Can be\n     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n     *     or 200 lux.\n     * @param backgroundLstar The lightness of the area surrounding the color.\n     *     measured by L* in L*a*b*. default = 50.0\n     * @param surround A general description of the lighting surrounding the\n     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n     *     dimly light room, like watching TV at home at night. 2.0 means there\n     *     is no difference between the lighting on the color and around it.\n     *     default = 2.0\n     * @param discountingIlluminant Whether the eye accounts for the tint of the\n     *     ambient lighting, such as knowing an apple is still red in green light.\n     *     default = false, the eye does not perform this process on\n     *       self-luminous objects like displays.\n     */\n    static make(whitePoint = utils.whitePointD65(), adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0, backgroundLstar = 50.0, surround = 2.0, discountingIlluminant = false) {\n        const xyz = whitePoint;\n        const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n        const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n        const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n        const f = 0.8 + surround / 10.0;\n        const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n            math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n        let d = discountingIlluminant ?\n            1.0 :\n            f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n        d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n        const nc = f;\n        const rgbD = [\n            d * (100.0 / rW) + 1.0 - d,\n            d * (100.0 / gW) + 1.0 - d,\n            d * (100.0 / bW) + 1.0 - d,\n        ];\n        const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n        const k4 = k * k * k * k;\n        const k4F = 1.0 - k4;\n        const fl = k4 * adaptingLuminance +\n            0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n        const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n        const z = 1.48 + Math.sqrt(n);\n        const nbb = 0.725 / Math.pow(n, 0.2);\n        const ncb = nbb;\n        const rgbAFactors = [\n            Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n            Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n            Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n        ];\n        const rgbA = [\n            (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n            (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n            (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n        ];\n        const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n        return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n    }\n    /**\n     * Parameters are intermediate values of the CAM16 conversion process. Their\n     * names are shorthand for technical color science terminology, this class\n     * would not benefit from documenting them individually. A brief overview\n     * is available in the CAM16 specification, and a complete overview requires\n     * a color science textbook, such as Fairchild's Color Appearance Models.\n     */\n    constructor(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {\n        this.n = n;\n        this.aw = aw;\n        this.nbb = nbb;\n        this.ncb = ncb;\n        this.c = c;\n        this.nc = nc;\n        this.rgbD = rgbD;\n        this.fl = fl;\n        this.fLRoot = fLRoot;\n        this.z = z;\n    }\n}\n/** sRGB-like viewing conditions.  */\nViewingConditions.DEFAULT = ViewingConditions.make();\n//# sourceMappingURL=viewing_conditions.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './blend/blend.js';\nexport * from './contrast/contrast.js';\nexport * from './dislike/dislike_analyzer.js';\nexport * from './dynamiccolor/dynamic_color.js';\nexport * from './dynamiccolor/material_dynamic_colors.js';\nexport * from './hct/cam16.js';\nexport * from './hct/hct.js';\nexport * from './hct/viewing_conditions.js';\nexport * from './palettes/core_palette.js';\nexport * from './palettes/tonal_palette.js';\nexport * from './quantize/quantizer_celebi.js';\nexport * from './quantize/quantizer_map.js';\nexport * from './quantize/quantizer_wsmeans.js';\nexport * from './quantize/quantizer_wu.js';\nexport * from './scheme/dynamic_scheme.js';\nexport * from './scheme/scheme.js';\nexport * from './scheme/scheme_android.js';\nexport * from './scheme/scheme_content.js';\nexport * from './scheme/scheme_expressive.js';\nexport * from './scheme/scheme_fidelity.js';\nexport * from './scheme/scheme_monochrome.js';\nexport * from './scheme/scheme_neutral.js';\nexport * from './scheme/scheme_tonal_spot.js';\nexport * from './scheme/scheme_vibrant.js';\nexport * from './score/score.js';\nexport * from './temperature/temperature_cache.js';\nexport * from './utils/color_utils.js';\nexport * from './utils/math_utils.js';\nexport * from './utils/string_utils.js';\nexport * from './utils/image_utils.js';\nexport * from './utils/theme_utils.js';\n\n//fix undefinded error\nexport * from './scheme/scheme_fruit_salad.js';\nexport * from './scheme/scheme_vibrant.js';\nexport * from './scheme/scheme_rainbow.js';\nexport * from \"./scheme/variant.js\";\n\n//# sourceMappingURL=index.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct.js';\nimport { TonalPalette } from './tonal_palette.js';\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n */\nexport class CorePalette {\n    /**\n     * @param argb ARGB representation of a color\n     */\n    static of(argb) {\n        return new CorePalette(argb, false);\n    }\n    /**\n     * @param argb ARGB representation of a color\n     */\n    static contentOf(argb) {\n        return new CorePalette(argb, true);\n    }\n    /**\n     * Create a [CorePalette] from a set of colors\n     */\n    static fromColors(colors) {\n        return CorePalette.createPaletteFromColors(false, colors);\n    }\n    /**\n     * Create a content [CorePalette] from a set of colors\n     */\n    static contentFromColors(colors) {\n        return CorePalette.createPaletteFromColors(true, colors);\n    }\n    static createPaletteFromColors(content, colors) {\n        const palette = new CorePalette(colors.primary, content);\n        if (colors.secondary) {\n            const p = new CorePalette(colors.secondary, content);\n            palette.a2 = p.a1;\n        }\n        if (colors.tertiary) {\n            const p = new CorePalette(colors.tertiary, content);\n            palette.a3 = p.a1;\n        }\n        if (colors.error) {\n            const p = new CorePalette(colors.error, content);\n            palette.error = p.a1;\n        }\n        if (colors.neutral) {\n            const p = new CorePalette(colors.neutral, content);\n            palette.n1 = p.n1;\n        }\n        if (colors.neutralVariant) {\n            const p = new CorePalette(colors.neutralVariant, content);\n            palette.n2 = p.n2;\n        }\n        return palette;\n    }\n    constructor(argb, isContent) {\n        const hct = Hct.fromInt(argb);\n        const hue = hct.hue;\n        const chroma = hct.chroma;\n        if (isContent) {\n            this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n            this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n            this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n            this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n        }\n        else {\n            this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n            this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n            this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n            this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n        }\n        this.error = TonalPalette.fromHueAndChroma(25, 84);\n    }\n}\n//# sourceMappingURL=core_palette.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct.js';\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n    /**\n     * @param argb ARGB representation of a color\n     * @return Tones matching that color's hue and chroma.\n     */\n    static fromInt(argb) {\n        const hct = Hct.fromInt(argb);\n        return TonalPalette.fromHct(hct);\n    }\n    /**\n     * @param hct Hct\n     * @return Tones matching that color's hue and chroma.\n     */\n    static fromHct(hct) {\n        return new TonalPalette(hct.hue, hct.chroma, hct);\n    }\n    /**\n     * @param hue HCT hue\n     * @param chroma HCT chroma\n     * @return Tones matching hue and chroma.\n     */\n    static fromHueAndChroma(hue, chroma) {\n        return new TonalPalette(hue, chroma, TonalPalette.createKeyColor(hue, chroma));\n    }\n    constructor(hue, chroma, keyColor) {\n        this.hue = hue;\n        this.chroma = chroma;\n        this.keyColor = keyColor;\n        this.cache = new Map();\n    }\n    static createKeyColor(hue, chroma) {\n        const startTone = 50.0;\n        let smallestDeltaHct = Hct.from(hue, chroma, startTone);\n        let smallestDelta = Math.abs(smallestDeltaHct.chroma - chroma);\n        // Starting from T50, check T+/-delta to see if they match the requested\n        // chroma.\n        //\n        // Starts from T50 because T50 has the most chroma available, on\n        // average. Thus it is most likely to have a direct answer and minimize\n        // iteration.\n        for (let delta = 1.0; delta < 50.0; delta += 1.0) {\n            // Termination condition rounding instead of minimizing delta to avoid\n            // case where requested chroma is 16.51, and the closest chroma is 16.49.\n            // Error is minimized, but when rounded and displayed, requested chroma\n            // is 17, key color's chroma is 16.\n            if (Math.round(chroma) === Math.round(smallestDeltaHct.chroma)) {\n                return smallestDeltaHct;\n            }\n            const hctAdd = Hct.from(hue, chroma, startTone + delta);\n            const hctAddDelta = Math.abs(hctAdd.chroma - chroma);\n            if (hctAddDelta < smallestDelta) {\n                smallestDelta = hctAddDelta;\n                smallestDeltaHct = hctAdd;\n            }\n            const hctSubtract = Hct.from(hue, chroma, startTone - delta);\n            const hctSubtractDelta = Math.abs(hctSubtract.chroma - chroma);\n            if (hctSubtractDelta < smallestDelta) {\n                smallestDelta = hctSubtractDelta;\n                smallestDeltaHct = hctSubtract;\n            }\n        }\n        return smallestDeltaHct;\n    }\n    /**\n     * @param tone HCT tone, measured from 0 to 100.\n     * @return ARGB representation of a color with that tone.\n     */\n    tone(tone) {\n        let argb = this.cache.get(tone);\n        if (argb === undefined) {\n            argb = Hct.from(this.hue, this.chroma, tone).toInt();\n            this.cache.set(tone, argb);\n        }\n        return argb;\n    }\n    /**\n     * @param tone HCT tone.\n     * @return HCT representation of a color with that tone.\n     */\n    getHct(tone) {\n        return Hct.fromInt(this.tone(tone));\n    }\n}\n//# sourceMappingURL=tonal_palette.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils.js';\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider {\n    /**\n     * Convert a color represented in ARGB to a 3-element array of L*a*b*\n     * coordinates of the color.\n     */\n    fromInt(argb) {\n        return utils.labFromArgb(argb);\n    }\n    /**\n     * Convert a 3-element array to a color represented in ARGB.\n     */\n    toInt(point) {\n        return utils.argbFromLab(point[0], point[1], point[2]);\n    }\n    /**\n     * Standard CIE 1976 delta E formula also takes the square root, unneeded\n     * here. This method is used by quantization algorithms to compare distance,\n     * and the relative ordering is the same, with or without a square root.\n     *\n     * This relatively minor optimization is helpful because this method is\n     * called at least once for each pixel in an image.\n     */\n    distance(from, to) {\n        const dL = from[0] - to[0];\n        const dA = from[1] - to[1];\n        const dB = from[2] - to[2];\n        return dL * dL + dA * dA + dB * dB;\n    }\n}\n//# sourceMappingURL=lab_point_provider.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { QuantizerWsmeans } from './quantizer_wsmeans.js';\nimport { QuantizerWu } from './quantizer_wu.js';\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n    /**\n     * @param pixels Colors in ARGB format.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Map with keys of colors in ARGB format, and values of number of\n     *     pixels in the original image that correspond to the color in the\n     *     quantized image.\n     */\n    static quantize(pixels, maxColors) {\n        const wu = new QuantizerWu();\n        const wuResult = wu.quantize(pixels, maxColors);\n        return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n    }\n}\n//# sourceMappingURL=quantizer_celebi.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils.js';\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n    /**\n     * @param pixels Colors in ARGB format.\n     * @return A Map with keys of ARGB colors, and values of the number of times\n     *     the color appears in the image.\n     */\n    static quantize(pixels) {\n        const countByColor = new Map();\n        for (let i = 0; i < pixels.length; i++) {\n            const pixel = pixels[i];\n            const alpha = utils.alphaFromArgb(pixel);\n            if (alpha < 255) {\n                continue;\n            }\n            countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\n        }\n        return countByColor;\n    }\n}\n//# sourceMappingURL=quantizer_map.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LabPointProvider } from './lab_point_provider.js';\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n    /**\n     * @param inputPixels Colors in ARGB format.\n     * @param startingClusters Defines the initial state of the quantizer. Passing\n     *     an empty array is fine, the implementation will create its own initial\n     *     state that leads to reproducible results for the same inputs.\n     *     Passing an array that is the result of Wu quantization leads to higher\n     *     quality results.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Colors in ARGB format.\n     */\n    static quantize(inputPixels, startingClusters, maxColors) {\n        const pixelToCount = new Map();\n        const points = new Array();\n        const pixels = new Array();\n        const pointProvider = new LabPointProvider();\n        let pointCount = 0;\n        for (let i = 0; i < inputPixels.length; i++) {\n            const inputPixel = inputPixels[i];\n            const pixelCount = pixelToCount.get(inputPixel);\n            if (pixelCount === undefined) {\n                pointCount++;\n                points.push(pointProvider.fromInt(inputPixel));\n                pixels.push(inputPixel);\n                pixelToCount.set(inputPixel, 1);\n            }\n            else {\n                pixelToCount.set(inputPixel, pixelCount + 1);\n            }\n        }\n        const counts = new Array();\n        for (let i = 0; i < pointCount; i++) {\n            const pixel = pixels[i];\n            const count = pixelToCount.get(pixel);\n            if (count !== undefined) {\n                counts[i] = count;\n            }\n        }\n        let clusterCount = Math.min(maxColors, pointCount);\n        if (startingClusters.length > 0) {\n            clusterCount = Math.min(clusterCount, startingClusters.length);\n        }\n        const clusters = new Array();\n        for (let i = 0; i < startingClusters.length; i++) {\n            clusters.push(pointProvider.fromInt(startingClusters[i]));\n        }\n        const additionalClustersNeeded = clusterCount - clusters.length;\n        if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n            for (let i = 0; i < additionalClustersNeeded; i++) {\n                const l = Math.random() * 100.0;\n                const a = Math.random() * (100.0 - (-100.0) + 1) + -100;\n                const b = Math.random() * (100.0 - (-100.0) + 1) + -100;\n                clusters.push(new Array(l, a, b));\n            }\n        }\n        const clusterIndices = new Array();\n        for (let i = 0; i < pointCount; i++) {\n            clusterIndices.push(Math.floor(Math.random() * clusterCount));\n        }\n        const indexMatrix = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            indexMatrix.push(new Array());\n            for (let j = 0; j < clusterCount; j++) {\n                indexMatrix[i].push(0);\n            }\n        }\n        const distanceToIndexMatrix = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            distanceToIndexMatrix.push(new Array());\n            for (let j = 0; j < clusterCount; j++) {\n                distanceToIndexMatrix[i].push(new DistanceAndIndex());\n            }\n        }\n        const pixelCountSums = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            pixelCountSums.push(0);\n        }\n        for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n            for (let i = 0; i < clusterCount; i++) {\n                for (let j = i + 1; j < clusterCount; j++) {\n                    const distance = pointProvider.distance(clusters[i], clusters[j]);\n                    distanceToIndexMatrix[j][i].distance = distance;\n                    distanceToIndexMatrix[j][i].index = i;\n                    distanceToIndexMatrix[i][j].distance = distance;\n                    distanceToIndexMatrix[i][j].index = j;\n                }\n                distanceToIndexMatrix[i].sort();\n                for (let j = 0; j < clusterCount; j++) {\n                    indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n                }\n            }\n            let pointsMoved = 0;\n            for (let i = 0; i < pointCount; i++) {\n                const point = points[i];\n                const previousClusterIndex = clusterIndices[i];\n                const previousCluster = clusters[previousClusterIndex];\n                const previousDistance = pointProvider.distance(point, previousCluster);\n                let minimumDistance = previousDistance;\n                let newClusterIndex = -1;\n                for (let j = 0; j < clusterCount; j++) {\n                    if (distanceToIndexMatrix[previousClusterIndex][j].distance >=\n                        4 * previousDistance) {\n                        continue;\n                    }\n                    const distance = pointProvider.distance(point, clusters[j]);\n                    if (distance < minimumDistance) {\n                        minimumDistance = distance;\n                        newClusterIndex = j;\n                    }\n                }\n                if (newClusterIndex !== -1) {\n                    const distanceChange = Math.abs((Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));\n                    if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n                        pointsMoved++;\n                        clusterIndices[i] = newClusterIndex;\n                    }\n                }\n            }\n            if (pointsMoved === 0 && iteration !== 0) {\n                break;\n            }\n            const componentASums = new Array(clusterCount).fill(0);\n            const componentBSums = new Array(clusterCount).fill(0);\n            const componentCSums = new Array(clusterCount).fill(0);\n            for (let i = 0; i < clusterCount; i++) {\n                pixelCountSums[i] = 0;\n            }\n            for (let i = 0; i < pointCount; i++) {\n                const clusterIndex = clusterIndices[i];\n                const point = points[i];\n                const count = counts[i];\n                pixelCountSums[clusterIndex] += count;\n                componentASums[clusterIndex] += (point[0] * count);\n                componentBSums[clusterIndex] += (point[1] * count);\n                componentCSums[clusterIndex] += (point[2] * count);\n            }\n            for (let i = 0; i < clusterCount; i++) {\n                const count = pixelCountSums[i];\n                if (count === 0) {\n                    clusters[i] = [0.0, 0.0, 0.0];\n                    continue;\n                }\n                const a = componentASums[i] / count;\n                const b = componentBSums[i] / count;\n                const c = componentCSums[i] / count;\n                clusters[i] = [a, b, c];\n            }\n        }\n        const argbToPopulation = new Map();\n        for (let i = 0; i < clusterCount; i++) {\n            const count = pixelCountSums[i];\n            if (count === 0) {\n                continue;\n            }\n            const possibleNewCluster = pointProvider.toInt(clusters[i]);\n            if (argbToPopulation.has(possibleNewCluster)) {\n                continue;\n            }\n            argbToPopulation.set(possibleNewCluster, count);\n        }\n        return argbToPopulation;\n    }\n}\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nclass DistanceAndIndex {\n    constructor() {\n        this.distance = -1;\n        this.index = -1;\n    }\n}\n//# sourceMappingURL=quantizer_wsmeans.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils.js';\nimport { QuantizerMap } from './quantizer_map.js';\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33; // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937; // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\nconst directions = {\n    RED: 'red',\n    GREEN: 'green',\n    BLUE: 'blue',\n};\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n    constructor(weights = [], momentsR = [], momentsG = [], momentsB = [], moments = [], cubes = []) {\n        this.weights = weights;\n        this.momentsR = momentsR;\n        this.momentsG = momentsG;\n        this.momentsB = momentsB;\n        this.moments = moments;\n        this.cubes = cubes;\n    }\n    /**\n     * @param pixels Colors in ARGB format.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Colors in ARGB format.\n     */\n    quantize(pixels, maxColors) {\n        this.constructHistogram(pixels);\n        this.computeMoments();\n        const createBoxesResult = this.createBoxes(maxColors);\n        const results = this.createResult(createBoxesResult.resultCount);\n        return results;\n    }\n    constructHistogram(pixels) {\n        this.weights = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsR = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsG = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsB = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.moments = Array.from({ length: TOTAL_SIZE }).fill(0);\n        const countByColor = QuantizerMap.quantize(pixels);\n        for (const [pixel, count] of countByColor.entries()) {\n            const red = utils.redFromArgb(pixel);\n            const green = utils.greenFromArgb(pixel);\n            const blue = utils.blueFromArgb(pixel);\n            const bitsToRemove = 8 - INDEX_BITS;\n            const iR = (red >> bitsToRemove) + 1;\n            const iG = (green >> bitsToRemove) + 1;\n            const iB = (blue >> bitsToRemove) + 1;\n            const index = this.getIndex(iR, iG, iB);\n            this.weights[index] = (this.weights[index] ?? 0) + count;\n            this.momentsR[index] += count * red;\n            this.momentsG[index] += count * green;\n            this.momentsB[index] += count * blue;\n            this.moments[index] += count * (red * red + green * green + blue * blue);\n        }\n    }\n    computeMoments() {\n        for (let r = 1; r < SIDE_LENGTH; r++) {\n            const area = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaR = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaG = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaB = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const area2 = Array.from({ length: SIDE_LENGTH }).fill(0.0);\n            for (let g = 1; g < SIDE_LENGTH; g++) {\n                let line = 0;\n                let lineR = 0;\n                let lineG = 0;\n                let lineB = 0;\n                let line2 = 0.0;\n                for (let b = 1; b < SIDE_LENGTH; b++) {\n                    const index = this.getIndex(r, g, b);\n                    line += this.weights[index];\n                    lineR += this.momentsR[index];\n                    lineG += this.momentsG[index];\n                    lineB += this.momentsB[index];\n                    line2 += this.moments[index];\n                    area[b] += line;\n                    areaR[b] += lineR;\n                    areaG[b] += lineG;\n                    areaB[b] += lineB;\n                    area2[b] += line2;\n                    const previousIndex = this.getIndex(r - 1, g, b);\n                    this.weights[index] = this.weights[previousIndex] + area[b];\n                    this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n                    this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n                    this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n                    this.moments[index] = this.moments[previousIndex] + area2[b];\n                }\n            }\n        }\n    }\n    createBoxes(maxColors) {\n        this.cubes =\n            Array.from({ length: maxColors }).fill(0).map(() => new Box());\n        const volumeVariance = Array.from({ length: maxColors }).fill(0.0);\n        this.cubes[0].r0 = 0;\n        this.cubes[0].g0 = 0;\n        this.cubes[0].b0 = 0;\n        this.cubes[0].r1 = SIDE_LENGTH - 1;\n        this.cubes[0].g1 = SIDE_LENGTH - 1;\n        this.cubes[0].b1 = SIDE_LENGTH - 1;\n        let generatedColorCount = maxColors;\n        let next = 0;\n        for (let i = 1; i < maxColors; i++) {\n            if (this.cut(this.cubes[next], this.cubes[i])) {\n                volumeVariance[next] =\n                    this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n                volumeVariance[i] =\n                    this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n            }\n            else {\n                volumeVariance[next] = 0.0;\n                i--;\n            }\n            next = 0;\n            let temp = volumeVariance[0];\n            for (let j = 1; j <= i; j++) {\n                if (volumeVariance[j] > temp) {\n                    temp = volumeVariance[j];\n                    next = j;\n                }\n            }\n            if (temp <= 0.0) {\n                generatedColorCount = i + 1;\n                break;\n            }\n        }\n        return new CreateBoxesResult(maxColors, generatedColorCount);\n    }\n    createResult(colorCount) {\n        const colors = [];\n        for (let i = 0; i < colorCount; ++i) {\n            const cube = this.cubes[i];\n            const weight = this.volume(cube, this.weights);\n            if (weight > 0) {\n                const r = Math.round(this.volume(cube, this.momentsR) / weight);\n                const g = Math.round(this.volume(cube, this.momentsG) / weight);\n                const b = Math.round(this.volume(cube, this.momentsB) / weight);\n                const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\n                    (b & 0x0ff);\n                colors.push(color);\n            }\n        }\n        return colors;\n    }\n    variance(cube) {\n        const dr = this.volume(cube, this.momentsR);\n        const dg = this.volume(cube, this.momentsG);\n        const db = this.volume(cube, this.momentsB);\n        const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n            this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n            this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n            this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n        const hypotenuse = dr * dr + dg * dg + db * db;\n        const volume = this.volume(cube, this.weights);\n        return xx - hypotenuse / volume;\n    }\n    cut(one, two) {\n        const wholeR = this.volume(one, this.momentsR);\n        const wholeG = this.volume(one, this.momentsG);\n        const wholeB = this.volume(one, this.momentsB);\n        const wholeW = this.volume(one, this.weights);\n        const maxRResult = this.maximize(one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB, wholeW);\n        const maxGResult = this.maximize(one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB, wholeW);\n        const maxBResult = this.maximize(one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB, wholeW);\n        let direction;\n        const maxR = maxRResult.maximum;\n        const maxG = maxGResult.maximum;\n        const maxB = maxBResult.maximum;\n        if (maxR >= maxG && maxR >= maxB) {\n            if (maxRResult.cutLocation < 0) {\n                return false;\n            }\n            direction = directions.RED;\n        }\n        else if (maxG >= maxR && maxG >= maxB) {\n            direction = directions.GREEN;\n        }\n        else {\n            direction = directions.BLUE;\n        }\n        two.r1 = one.r1;\n        two.g1 = one.g1;\n        two.b1 = one.b1;\n        switch (direction) {\n            case directions.RED:\n                one.r1 = maxRResult.cutLocation;\n                two.r0 = one.r1;\n                two.g0 = one.g0;\n                two.b0 = one.b0;\n                break;\n            case directions.GREEN:\n                one.g1 = maxGResult.cutLocation;\n                two.r0 = one.r0;\n                two.g0 = one.g1;\n                two.b0 = one.b0;\n                break;\n            case directions.BLUE:\n                one.b1 = maxBResult.cutLocation;\n                two.r0 = one.r0;\n                two.g0 = one.g0;\n                two.b0 = one.b1;\n                break;\n            default:\n                throw new Error('unexpected direction ' + direction);\n        }\n        one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n        two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n        return true;\n    }\n    maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {\n        const bottomR = this.bottom(cube, direction, this.momentsR);\n        const bottomG = this.bottom(cube, direction, this.momentsG);\n        const bottomB = this.bottom(cube, direction, this.momentsB);\n        const bottomW = this.bottom(cube, direction, this.weights);\n        let max = 0.0;\n        let cut = -1;\n        let halfR = 0;\n        let halfG = 0;\n        let halfB = 0;\n        let halfW = 0;\n        for (let i = first; i < last; i++) {\n            halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n            halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n            halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n            halfW = bottomW + this.top(cube, direction, i, this.weights);\n            if (halfW === 0) {\n                continue;\n            }\n            let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n            let tempDenominator = halfW * 1.0;\n            let temp = tempNumerator / tempDenominator;\n            halfR = wholeR - halfR;\n            halfG = wholeG - halfG;\n            halfB = wholeB - halfB;\n            halfW = wholeW - halfW;\n            if (halfW === 0) {\n                continue;\n            }\n            tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n            tempDenominator = halfW * 1.0;\n            temp += tempNumerator / tempDenominator;\n            if (temp > max) {\n                max = temp;\n                cut = i;\n            }\n        }\n        return new MaximizeResult(cut, max);\n    }\n    volume(cube, moment) {\n        return (moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n            moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n            moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n            moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n    }\n    bottom(cube, direction, moment) {\n        switch (direction) {\n            case directions.RED:\n                return (-moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            case directions.GREEN:\n                return (-moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            case directions.BLUE:\n                return (-moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            default:\n                throw new Error('unexpected direction $direction');\n        }\n    }\n    top(cube, direction, position, moment) {\n        switch (direction) {\n            case directions.RED:\n                return (moment[this.getIndex(position, cube.g1, cube.b1)] -\n                    moment[this.getIndex(position, cube.g1, cube.b0)] -\n                    moment[this.getIndex(position, cube.g0, cube.b1)] +\n                    moment[this.getIndex(position, cube.g0, cube.b0)]);\n            case directions.GREEN:\n                return (moment[this.getIndex(cube.r1, position, cube.b1)] -\n                    moment[this.getIndex(cube.r1, position, cube.b0)] -\n                    moment[this.getIndex(cube.r0, position, cube.b1)] +\n                    moment[this.getIndex(cube.r0, position, cube.b0)]);\n            case directions.BLUE:\n                return (moment[this.getIndex(cube.r1, cube.g1, position)] -\n                    moment[this.getIndex(cube.r1, cube.g0, position)] -\n                    moment[this.getIndex(cube.r0, cube.g1, position)] +\n                    moment[this.getIndex(cube.r0, cube.g0, position)]);\n            default:\n                throw new Error('unexpected direction $direction');\n        }\n    }\n    getIndex(r, g, b) {\n        return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\n            (g << INDEX_BITS) + g + b;\n    }\n}\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nclass Box {\n    constructor(r0 = 0, r1 = 0, g0 = 0, g1 = 0, b0 = 0, b1 = 0, vol = 0) {\n        this.r0 = r0;\n        this.r1 = r1;\n        this.g0 = g0;\n        this.g1 = g1;\n        this.b0 = b0;\n        this.b1 = b1;\n        this.vol = vol;\n    }\n}\n/**\n * Represents final result of Wu algorithm.\n */\nclass CreateBoxesResult {\n    /**\n     * @param requestedCount how many colors the caller asked to be returned from\n     *     quantization.\n     * @param resultCount the actual number of colors achieved from quantization.\n     *     May be lower than the requested count.\n     */\n    constructor(requestedCount, resultCount) {\n        this.requestedCount = requestedCount;\n        this.resultCount = resultCount;\n    }\n}\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nclass MaximizeResult {\n    constructor(cutLocation, maximum) {\n        this.cutLocation = cutLocation;\n        this.maximum = maximum;\n    }\n}\n//# sourceMappingURL=quantizer_wu.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct.js';\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n    constructor(args) {\n        this.sourceColorArgb = args.sourceColorArgb;\n        this.variant = args.variant;\n        this.contrastLevel = args.contrastLevel;\n        this.isDark = args.isDark;\n        this.sourceColorHct = Hct.fromInt(args.sourceColorArgb);\n        this.primaryPalette = args.primaryPalette;\n        this.secondaryPalette = args.secondaryPalette;\n        this.tertiaryPalette = args.tertiaryPalette;\n        this.neutralPalette = args.neutralPalette;\n        this.neutralVariantPalette = args.neutralVariantPalette;\n        this.errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);\n    }\n    /**\n     * Support design spec'ing Dynamic Color by schemes that specify hue\n     * rotations that should be applied at certain breakpoints.\n     * @param sourceColor the source color of the theme, in HCT.\n     * @param hues The \"breakpoints\", i.e. the hues at which a rotation should\n     * be apply.\n     * @param rotations The rotation that should be applied when source color's\n     * hue is >= the same index in hues array, and <= the hue at the next index\n     * in hues array.\n     */\n    static getRotatedHue(sourceColor, hues, rotations) {\n        const sourceHue = sourceColor.hue;\n        if (hues.length !== rotations.length) {\n            throw new Error(`mismatch between hue length ${hues.length} & rotations ${rotations.length}`);\n        }\n        if (rotations.length === 1) {\n            return math.sanitizeDegreesDouble(sourceColor.hue + rotations[0]);\n        }\n        const size = hues.length;\n        for (let i = 0; i <= size - 2; i++) {\n            const thisHue = hues[i];\n            const nextHue = hues[i + 1];\n            if (thisHue < sourceHue && sourceHue < nextHue) {\n                return math.sanitizeDegreesDouble(sourceHue + rotations[i]);\n            }\n        }\n        // If this statement executes, something is wrong, there should have been a\n        // rotation found using the arrays.\n        return sourceHue;\n    }\n}\n//# sourceMappingURL=dynamic_scheme.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport { CorePalette } from '../palettes/core_palette.js';\n/**\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n    get primary() {\n        return this.props.primary;\n    }\n    get onPrimary() {\n        return this.props.onPrimary;\n    }\n    get primaryContainer() {\n        return this.props.primaryContainer;\n    }\n    get onPrimaryContainer() {\n        return this.props.onPrimaryContainer;\n    }\n    get secondary() {\n        return this.props.secondary;\n    }\n    get onSecondary() {\n        return this.props.onSecondary;\n    }\n    get secondaryContainer() {\n        return this.props.secondaryContainer;\n    }\n    get onSecondaryContainer() {\n        return this.props.onSecondaryContainer;\n    }\n    get tertiary() {\n        return this.props.tertiary;\n    }\n    get onTertiary() {\n        return this.props.onTertiary;\n    }\n    get tertiaryContainer() {\n        return this.props.tertiaryContainer;\n    }\n    get onTertiaryContainer() {\n        return this.props.onTertiaryContainer;\n    }\n    get error() {\n        return this.props.error;\n    }\n    get onError() {\n        return this.props.onError;\n    }\n    get errorContainer() {\n        return this.props.errorContainer;\n    }\n    get onErrorContainer() {\n        return this.props.onErrorContainer;\n    }\n    get background() {\n        return this.props.background;\n    }\n    get onBackground() {\n        return this.props.onBackground;\n    }\n    get surface() {\n        return this.props.surface;\n    }\n    get onSurface() {\n        return this.props.onSurface;\n    }\n    get surfaceVariant() {\n        return this.props.surfaceVariant;\n    }\n    get onSurfaceVariant() {\n        return this.props.onSurfaceVariant;\n    }\n    get outline() {\n        return this.props.outline;\n    }\n    get outlineVariant() {\n        return this.props.outlineVariant;\n    }\n    get shadow() {\n        return this.props.shadow;\n    }\n    get scrim() {\n        return this.props.scrim;\n    }\n    get inverseSurface() {\n        return this.props.inverseSurface;\n    }\n    get inverseOnSurface() {\n        return this.props.inverseOnSurface;\n    }\n    get inversePrimary() {\n        return this.props.inversePrimary;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material color scheme, based on the color's hue.\n     */\n    static light(argb) {\n        return Scheme.lightFromCorePalette(CorePalette.of(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material color scheme, based on the color's hue.\n     */\n    static dark(argb) {\n        return Scheme.darkFromCorePalette(CorePalette.of(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material content color scheme, based on the color's hue.\n     */\n    static lightContent(argb) {\n        return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material content color scheme, based on the color's hue.\n     */\n    static darkContent(argb) {\n        return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n    }\n    /**\n     * Light scheme from core palette\n     */\n    static lightFromCorePalette(core) {\n        return new Scheme({\n            primary: core.a1.tone(40),\n            onPrimary: core.a1.tone(100),\n            primaryContainer: core.a1.tone(90),\n            onPrimaryContainer: core.a1.tone(10),\n            secondary: core.a2.tone(40),\n            onSecondary: core.a2.tone(100),\n            secondaryContainer: core.a2.tone(90),\n            onSecondaryContainer: core.a2.tone(10),\n            tertiary: core.a3.tone(40),\n            onTertiary: core.a3.tone(100),\n            tertiaryContainer: core.a3.tone(90),\n            onTertiaryContainer: core.a3.tone(10),\n            error: core.error.tone(40),\n            onError: core.error.tone(100),\n            errorContainer: core.error.tone(90),\n            onErrorContainer: core.error.tone(10),\n            background: core.n1.tone(99),\n            onBackground: core.n1.tone(10),\n            surface: core.n1.tone(99),\n            onSurface: core.n1.tone(10),\n            surfaceVariant: core.n2.tone(90),\n            onSurfaceVariant: core.n2.tone(30),\n            outline: core.n2.tone(50),\n            outlineVariant: core.n2.tone(80),\n            shadow: core.n1.tone(0),\n            scrim: core.n1.tone(0),\n            inverseSurface: core.n1.tone(20),\n            inverseOnSurface: core.n1.tone(95),\n            inversePrimary: core.a1.tone(80)\n        });\n    }\n    /**\n     * Dark scheme from core palette\n     */\n    static darkFromCorePalette(core) {\n        return new Scheme({\n            primary: core.a1.tone(80),\n            onPrimary: core.a1.tone(20),\n            primaryContainer: core.a1.tone(30),\n            onPrimaryContainer: core.a1.tone(90),\n            secondary: core.a2.tone(80),\n            onSecondary: core.a2.tone(20),\n            secondaryContainer: core.a2.tone(30),\n            onSecondaryContainer: core.a2.tone(90),\n            tertiary: core.a3.tone(80),\n            onTertiary: core.a3.tone(20),\n            tertiaryContainer: core.a3.tone(30),\n            onTertiaryContainer: core.a3.tone(90),\n            error: core.error.tone(80),\n            onError: core.error.tone(20),\n            errorContainer: core.error.tone(30),\n            onErrorContainer: core.error.tone(80),\n            background: core.n1.tone(10),\n            onBackground: core.n1.tone(90),\n            surface: core.n1.tone(10),\n            onSurface: core.n1.tone(90),\n            surfaceVariant: core.n2.tone(30),\n            onSurfaceVariant: core.n2.tone(80),\n            outline: core.n2.tone(60),\n            outlineVariant: core.n2.tone(30),\n            shadow: core.n1.tone(0),\n            scrim: core.n1.tone(0),\n            inverseSurface: core.n1.tone(90),\n            inverseOnSurface: core.n1.tone(20),\n            inversePrimary: core.a1.tone(40)\n        });\n    }\n    constructor(props) {\n        this.props = props;\n    }\n    toJSON() {\n        return {\n            ...this.props\n        };\n    }\n}\n//# sourceMappingURL=scheme.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CorePalette } from '../palettes/core_palette.js';\n/**\n * Represents an Android 12 color scheme, a mapping of color roles to colors.\n */\nexport class SchemeAndroid {\n    get colorAccentPrimary() {\n        return this.props.colorAccentPrimary;\n    }\n    get colorAccentPrimaryVariant() {\n        return this.props.colorAccentPrimaryVariant;\n    }\n    get colorAccentSecondary() {\n        return this.props.colorAccentSecondary;\n    }\n    get colorAccentSecondaryVariant() {\n        return this.props.colorAccentSecondaryVariant;\n    }\n    get colorAccentTertiary() {\n        return this.props.colorAccentTertiary;\n    }\n    get colorAccentTertiaryVariant() {\n        return this.props.colorAccentTertiaryVariant;\n    }\n    get textColorPrimary() {\n        return this.props.textColorPrimary;\n    }\n    get textColorSecondary() {\n        return this.props.textColorSecondary;\n    }\n    get textColorTertiary() {\n        return this.props.textColorTertiary;\n    }\n    get textColorPrimaryInverse() {\n        return this.props.textColorPrimaryInverse;\n    }\n    get textColorSecondaryInverse() {\n        return this.props.textColorSecondaryInverse;\n    }\n    get textColorTertiaryInverse() {\n        return this.props.textColorTertiaryInverse;\n    }\n    get colorBackground() {\n        return this.props.colorBackground;\n    }\n    get colorBackgroundFloating() {\n        return this.props.colorBackgroundFloating;\n    }\n    get colorSurface() {\n        return this.props.colorSurface;\n    }\n    get colorSurfaceVariant() {\n        return this.props.colorSurfaceVariant;\n    }\n    get colorSurfaceHighlight() {\n        return this.props.colorSurfaceHighlight;\n    }\n    get surfaceHeader() {\n        return this.props.surfaceHeader;\n    }\n    get underSurface() {\n        return this.props.underSurface;\n    }\n    get offState() {\n        return this.props.offState;\n    }\n    get accentSurface() {\n        return this.props.accentSurface;\n    }\n    get textPrimaryOnAccent() {\n        return this.props.textPrimaryOnAccent;\n    }\n    get textSecondaryOnAccent() {\n        return this.props.textSecondaryOnAccent;\n    }\n    get volumeBackground() {\n        return this.props.volumeBackground;\n    }\n    get scrim() {\n        return this.props.scrim;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material color scheme, based on the color's hue.\n     */\n    static light(argb) {\n        const core = CorePalette.of(argb);\n        return SchemeAndroid.lightFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material color scheme, based on the color's hue.\n     */\n    static dark(argb) {\n        const core = CorePalette.of(argb);\n        return SchemeAndroid.darkFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Android color scheme, based on the color's hue.\n     */\n    static lightContent(argb) {\n        const core = CorePalette.contentOf(argb);\n        return SchemeAndroid.lightFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Android color scheme, based on the color's hue.\n     */\n    static darkContent(argb) {\n        const core = CorePalette.contentOf(argb);\n        return SchemeAndroid.darkFromCorePalette(core);\n    }\n    /**\n     * Light scheme from core palette\n     */\n    static lightFromCorePalette(core) {\n        return new SchemeAndroid({\n            colorAccentPrimary: core.a1.tone(90),\n            colorAccentPrimaryVariant: core.a1.tone(40),\n            colorAccentSecondary: core.a2.tone(90),\n            colorAccentSecondaryVariant: core.a2.tone(40),\n            colorAccentTertiary: core.a3.tone(90),\n            colorAccentTertiaryVariant: core.a3.tone(40),\n            textColorPrimary: core.n1.tone(10),\n            textColorSecondary: core.n2.tone(30),\n            textColorTertiary: core.n2.tone(50),\n            textColorPrimaryInverse: core.n1.tone(95),\n            textColorSecondaryInverse: core.n1.tone(80),\n            textColorTertiaryInverse: core.n1.tone(60),\n            colorBackground: core.n1.tone(95),\n            colorBackgroundFloating: core.n1.tone(98),\n            colorSurface: core.n1.tone(98),\n            colorSurfaceVariant: core.n1.tone(90),\n            colorSurfaceHighlight: core.n1.tone(100),\n            surfaceHeader: core.n1.tone(90),\n            underSurface: core.n1.tone(0),\n            offState: core.n1.tone(20),\n            accentSurface: core.a2.tone(95),\n            textPrimaryOnAccent: core.n1.tone(10),\n            textSecondaryOnAccent: core.n2.tone(30),\n            volumeBackground: core.n1.tone(25),\n            scrim: core.n1.tone(80),\n        });\n    }\n    /**\n     * Dark scheme from core palette\n     */\n    static darkFromCorePalette(core) {\n        return new SchemeAndroid({\n            colorAccentPrimary: core.a1.tone(90),\n            colorAccentPrimaryVariant: core.a1.tone(70),\n            colorAccentSecondary: core.a2.tone(90),\n            colorAccentSecondaryVariant: core.a2.tone(70),\n            colorAccentTertiary: core.a3.tone(90),\n            colorAccentTertiaryVariant: core.a3.tone(70),\n            textColorPrimary: core.n1.tone(95),\n            textColorSecondary: core.n2.tone(80),\n            textColorTertiary: core.n2.tone(60),\n            textColorPrimaryInverse: core.n1.tone(10),\n            textColorSecondaryInverse: core.n1.tone(30),\n            textColorTertiaryInverse: core.n1.tone(50),\n            colorBackground: core.n1.tone(10),\n            colorBackgroundFloating: core.n1.tone(10),\n            colorSurface: core.n1.tone(20),\n            colorSurfaceVariant: core.n1.tone(30),\n            colorSurfaceHighlight: core.n1.tone(35),\n            surfaceHeader: core.n1.tone(30),\n            underSurface: core.n1.tone(0),\n            offState: core.n1.tone(20),\n            accentSurface: core.a2.tone(95),\n            textPrimaryOnAccent: core.n1.tone(10),\n            textSecondaryOnAccent: core.n2.tone(30),\n            volumeBackground: core.n1.tone(25),\n            scrim: core.n1.tone(80),\n        });\n    }\n    constructor(props) {\n        this.props = props;\n    }\n    toJSON() {\n        return { ...this.props };\n    }\n}\n//# sourceMappingURL=scheme_android.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DislikeAnalyzer } from '../dislike/dislike_analyzer.js';\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport { TemperatureCache } from '../temperature/temperature_cache.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n */\nexport class SchemeContent extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.CONTENT,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, Math.max(sourceColorHct.chroma - 32.0, sourceColorHct.chroma * 0.5)),\n            tertiaryPalette: TonalPalette.fromInt(DislikeAnalyzer\n                .fixIfDisliked(new TemperatureCache(sourceColorHct).analogous(3, 6)[2])\n                .toInt()),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma / 8.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma / 8.0 + 4.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_content.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A Dynamic Color theme that is intentionally detached from the source color.\n */\nexport class SchemeExpressive extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.EXPRESSIVE,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(math.sanitizeDegreesDouble(sourceColorHct.hue + 240.0), 40.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeExpressive.hues, SchemeExpressive.secondaryRotations), 24.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeExpressive.hues, SchemeExpressive.tertiaryRotations), 32.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 8.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 12.0),\n        });\n    }\n}\n/**\n * Hues (in degrees) used at breakpoints such that designers can specify a\n * hue rotation that occurs at a given break point.\n */\nSchemeExpressive.hues = [\n    0.0,\n    21.0,\n    51.0,\n    121.0,\n    151.0,\n    191.0,\n    271.0,\n    321.0,\n    360.0,\n];\n/**\n * Hue rotations (in degrees) of the Secondary [TonalPalette],\n * corresponding to the breakpoints in [hues].\n */\nSchemeExpressive.secondaryRotations = [\n    45.0,\n    95.0,\n    45.0,\n    20.0,\n    45.0,\n    90.0,\n    45.0,\n    45.0,\n    45.0,\n];\n/**\n * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n * corresponding to the breakpoints in [hues].\n */\nSchemeExpressive.tertiaryRotations = [\n    120.0,\n    120.0,\n    20.0,\n    45.0,\n    20.0,\n    15.0,\n    20.0,\n    120.0,\n    120.0,\n];\n//# sourceMappingURL=scheme_expressive.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DislikeAnalyzer } from '../dislike/dislike_analyzer.js';\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport { TemperatureCache } from '../temperature/temperature_cache.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n */\nexport class SchemeFidelity extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.FIDELITY,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, Math.max(sourceColorHct.chroma - 32.0, sourceColorHct.chroma * 0.5)),\n            tertiaryPalette: TonalPalette.fromInt(DislikeAnalyzer\n                .fixIfDisliked(new TemperatureCache(sourceColorHct).complement)\n                .toInt()),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma / 8.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, sourceColorHct.chroma / 8.0 + 4.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_fidelity.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n */\nexport class SchemeFruitSalad extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.FRUIT_SALAD,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0), 48.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0), 36.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_fruit_salad.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/** A Dynamic Color theme that is grayscale. */\nexport class SchemeMonochrome extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.MONOCHROME,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_monochrome.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/** A Dynamic Color theme that is near grayscale. */\nexport class SchemeNeutral extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.NEUTRAL,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_neutral.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n */\nexport class SchemeRainbow extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.RAINBOW,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 48.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(math.sanitizeDegreesDouble(sourceColorHct.hue + 60.0), 24.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_rainbow.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A Dynamic Color theme with low to medium colorfulness and a Tertiary\n * TonalPalette with a hue related to the source color.\n *\n * The default Material You theme on Android 12 and 13.\n */\nexport class SchemeTonalSpot extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.TONAL_SPOT,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(math.sanitizeDegreesDouble(sourceColorHct.hue + 60.0), 24.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 6.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),\n        });\n    }\n}\n//# sourceMappingURL=scheme_tonal_spot.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TonalPalette } from '../palettes/tonal_palette.js';\nimport { DynamicScheme } from './dynamic_scheme.js';\nimport { Variant } from './variant.js';\n/**\n * A Dynamic Color theme that maxes out colorfulness at each position in the\n * Primary Tonal Palette.\n */\nexport class SchemeVibrant extends DynamicScheme {\n    constructor(sourceColorHct, isDark, contrastLevel) {\n        super({\n            sourceColorArgb: sourceColorHct.toInt(),\n            variant: Variant.VIBRANT,\n            contrastLevel,\n            isDark,\n            primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0),\n            secondaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeVibrant.hues, SchemeVibrant.secondaryRotations), 24.0),\n            tertiaryPalette: TonalPalette.fromHueAndChroma(DynamicScheme.getRotatedHue(sourceColorHct, SchemeVibrant.hues, SchemeVibrant.tertiaryRotations), 32.0),\n            neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n            neutralVariantPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n        });\n    }\n}\n/**\n * Hues (in degrees) used at breakpoints such that designers can specify a\n * hue rotation that occurs at a given break point.\n */\nSchemeVibrant.hues = [\n    0.0,\n    41.0,\n    61.0,\n    101.0,\n    131.0,\n    181.0,\n    251.0,\n    301.0,\n    360.0,\n];\n/**\n * Hue rotations (in degrees) of the Secondary [TonalPalette],\n * corresponding to the breakpoints in [hues].\n */\nSchemeVibrant.secondaryRotations = [\n    18.0,\n    15.0,\n    10.0,\n    12.0,\n    15.0,\n    18.0,\n    15.0,\n    12.0,\n    12.0,\n];\n/**\n * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n * corresponding to the breakpoints in [hues].\n */\nSchemeVibrant.tertiaryRotations = [\n    35.0,\n    30.0,\n    20.0,\n    25.0,\n    30.0,\n    35.0,\n    30.0,\n    25.0,\n    25.0,\n];\n//# sourceMappingURL=scheme_vibrant.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Set of themes supported by Dynamic Color.\n * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create\n * colors corresponding to the theme.\n */\nexport var Variant;\n(function (Variant) {\n    Variant[Variant[\"MONOCHROME\"] = 0] = \"MONOCHROME\";\n    Variant[Variant[\"NEUTRAL\"] = 1] = \"NEUTRAL\";\n    Variant[Variant[\"TONAL_SPOT\"] = 2] = \"TONAL_SPOT\";\n    Variant[Variant[\"VIBRANT\"] = 3] = \"VIBRANT\";\n    Variant[Variant[\"EXPRESSIVE\"] = 4] = \"EXPRESSIVE\";\n    Variant[Variant[\"FIDELITY\"] = 5] = \"FIDELITY\";\n    Variant[Variant[\"CONTENT\"] = 6] = \"CONTENT\";\n    Variant[Variant[\"RAINBOW\"] = 7] = \"RAINBOW\";\n    Variant[Variant[\"FRUIT_SALAD\"] = 8] = \"FRUIT_SALAD\";\n})(Variant || (Variant = {}));\n//# sourceMappingURL=variant.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct.js';\nimport * as math from '../utils/math_utils.js';\nconst SCORE_OPTION_DEFAULTS = {\n    desired: 4,\n    fallbackColorARGB: 0xff4285f4,\n    filter: true, // Avoid unsuitable colors.\n};\nfunction compare(a, b) {\n    if (a.score > b.score) {\n        return -1;\n    }\n    else if (a.score < b.score) {\n        return 1;\n    }\n    return 0;\n}\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n    constructor() { }\n    /**\n     * Given a map with keys of colors and values of how often the color appears,\n     * rank the colors based on suitability for being used for a UI theme.\n     *\n     * @param colorsToPopulation map with keys of colors and values of how often\n     *     the color appears, usually from a source image.\n     * @param {ScoreOptions} options optional parameters.\n     * @return Colors sorted by suitability for a UI theme. The most suitable\n     *     color is the first item, the least suitable is the last. There will\n     *     always be at least one color returned. If all the input colors\n     *     were not suitable for a theme, a default fallback color will be\n     *     provided, Google Blue.\n     */\n    static score(colorsToPopulation, options) {\n        const { desired, fallbackColorARGB, filter } = { ...SCORE_OPTION_DEFAULTS, ...options };\n        // Get the HCT color for each Argb value, while finding the per hue count and\n        // total count.\n        const colorsHct = [];\n        const huePopulation = new Array(360).fill(0);\n        let populationSum = 0;\n        for (const [argb, population] of colorsToPopulation.entries()) {\n            const hct = Hct.fromInt(argb);\n            colorsHct.push(hct);\n            const hue = Math.floor(hct.hue);\n            huePopulation[hue] += population;\n            populationSum += population;\n        }\n        // Hues with more usage in neighboring 30 degree slice get a larger number.\n        const hueExcitedProportions = new Array(360).fill(0.0);\n        for (let hue = 0; hue < 360; hue++) {\n            const proportion = huePopulation[hue] / populationSum;\n            for (let i = hue - 14; i < hue + 16; i++) {\n                const neighborHue = math.sanitizeDegreesInt(i);\n                hueExcitedProportions[neighborHue] += proportion;\n            }\n        }\n        // Scores each HCT color based on usage and chroma, while optionally\n        // filtering out values that do not have enough chroma or usage.\n        const scoredHct = new Array();\n        for (const hct of colorsHct) {\n            const hue = math.sanitizeDegreesInt(Math.round(hct.hue));\n            const proportion = hueExcitedProportions[hue];\n            if (filter && (hct.chroma < Score.CUTOFF_CHROMA || proportion <= Score.CUTOFF_EXCITED_PROPORTION)) {\n                continue;\n            }\n            const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n            const chromaWeight = hct.chroma < Score.TARGET_CHROMA ? Score.WEIGHT_CHROMA_BELOW : Score.WEIGHT_CHROMA_ABOVE;\n            const chromaScore = (hct.chroma - Score.TARGET_CHROMA) * chromaWeight;\n            const score = proportionScore + chromaScore;\n            scoredHct.push({ hct, score });\n        }\n        // Sorted so that colors with higher scores come first.\n        scoredHct.sort(compare);\n        // Iterates through potential hue differences in degrees in order to select\n        // the colors with the largest distribution of hues possible. Starting at\n        // 90 degrees(maximum difference for 4 colors) then decreasing down to a\n        // 15 degree minimum.\n        const chosenColors = [];\n        for (let differenceDegrees = 90; differenceDegrees >= 15; differenceDegrees--) {\n            chosenColors.length = 0;\n            for (const { hct } of scoredHct) {\n                const duplicateHue = chosenColors.find(chosenHct => {\n                    return math.differenceDegrees(hct.hue, chosenHct.hue) < differenceDegrees;\n                });\n                if (!duplicateHue) {\n                    chosenColors.push(hct);\n                }\n                if (chosenColors.length >= desired)\n                    break;\n            }\n            if (chosenColors.length >= desired)\n                break;\n        }\n        const colors = [];\n        if (chosenColors.length === 0) {\n            colors.push(fallbackColorARGB);\n        }\n        for (const chosenHct of chosenColors) {\n            colors.push(chosenHct.toInt());\n        }\n        return colors;\n    }\n}\nScore.TARGET_CHROMA = 48.0; // A1 Chroma\nScore.WEIGHT_PROPORTION = 0.7;\nScore.WEIGHT_CHROMA_ABOVE = 0.3;\nScore.WEIGHT_CHROMA_BELOW = 0.1;\nScore.CUTOFF_CHROMA = 5.0;\nScore.CUTOFF_EXCITED_PROPORTION = 0.01;\n//# sourceMappingURL=score.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport { Hct } from '../hct/hct.js';\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n/**\n * Design utilities using color temperature theory.\n *\n * Analogous colors, complementary color, and cache to efficiently, lazily,\n * generate data for calculations when needed.\n */\nexport class TemperatureCache {\n    constructor(input) {\n        this.input = input;\n        this.hctsByTempCache = [];\n        this.hctsByHueCache = [];\n        this.tempsByHctCache = new Map();\n        this.inputRelativeTemperatureCache = -1.0;\n        this.complementCache = null;\n    }\n    get hctsByTemp() {\n        if (this.hctsByTempCache.length > 0) {\n            return this.hctsByTempCache;\n        }\n        const hcts = this.hctsByHue.concat([this.input]);\n        const temperaturesByHct = this.tempsByHct;\n        hcts.sort((a, b) => temperaturesByHct.get(a) - temperaturesByHct.get(b));\n        this.hctsByTempCache = hcts;\n        return hcts;\n    }\n    get warmest() {\n        return this.hctsByTemp[this.hctsByTemp.length - 1];\n    }\n    get coldest() {\n        return this.hctsByTemp[0];\n    }\n    /**\n     * A set of colors with differing hues, equidistant in temperature.\n     *\n     * In art, this is usually described as a set of 5 colors on a color wheel\n     * divided into 12 sections. This method allows provision of either of those\n     * values.\n     *\n     * Behavior is undefined when [count] or [divisions] is 0.\n     * When divisions < count, colors repeat.\n     *\n     * [count] The number of colors to return, includes the input color.\n     * [divisions] The number of divisions on the color wheel.\n     */\n    analogous(count = 5, divisions = 12) {\n        const startHue = Math.round(this.input.hue);\n        const startHct = this.hctsByHue[startHue];\n        let lastTemp = this.relativeTemperature(startHct);\n        const allColors = [startHct];\n        let absoluteTotalTempDelta = 0.0;\n        for (let i = 0; i < 360; i++) {\n            const hue = mathUtils.sanitizeDegreesInt(startHue + i);\n            const hct = this.hctsByHue[hue];\n            const temp = this.relativeTemperature(hct);\n            const tempDelta = Math.abs(temp - lastTemp);\n            lastTemp = temp;\n            absoluteTotalTempDelta += tempDelta;\n        }\n        let hueAddend = 1;\n        const tempStep = absoluteTotalTempDelta / divisions;\n        let totalTempDelta = 0.0;\n        lastTemp = this.relativeTemperature(startHct);\n        while (allColors.length < divisions) {\n            const hue = mathUtils.sanitizeDegreesInt(startHue + hueAddend);\n            const hct = this.hctsByHue[hue];\n            const temp = this.relativeTemperature(hct);\n            const tempDelta = Math.abs(temp - lastTemp);\n            totalTempDelta += tempDelta;\n            const desiredTotalTempDeltaForIndex = allColors.length * tempStep;\n            let indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n            let indexAddend = 1;\n            // Keep adding this hue to the answers until its temperature is\n            // insufficient. This ensures consistent behavior when there aren't\n            // [divisions] discrete steps between 0 and 360 in hue with [tempStep]\n            // delta in temperature between them.\n            //\n            // For example, white and black have no analogues: there are no other\n            // colors at T100/T0. Therefore, they should just be added to the array\n            // as answers.\n            while (indexSatisfied && allColors.length < divisions) {\n                allColors.push(hct);\n                const desiredTotalTempDeltaForIndex = ((allColors.length + indexAddend) * tempStep);\n                indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n                indexAddend++;\n            }\n            lastTemp = temp;\n            hueAddend++;\n            if (hueAddend > 360) {\n                while (allColors.length < divisions) {\n                    allColors.push(hct);\n                }\n                break;\n            }\n        }\n        const answers = [this.input];\n        // First, generate analogues from rotating counter-clockwise.\n        const increaseHueCount = Math.floor((count - 1) / 2.0);\n        for (let i = 1; i < (increaseHueCount + 1); i++) {\n            let index = 0 - i;\n            while (index < 0) {\n                index = allColors.length + index;\n            }\n            if (index >= allColors.length) {\n                index = index % allColors.length;\n            }\n            answers.splice(0, 0, allColors[index]);\n        }\n        // Second, generate analogues from rotating clockwise.\n        const decreaseHueCount = count - increaseHueCount - 1;\n        for (let i = 1; i < (decreaseHueCount + 1); i++) {\n            let index = i;\n            while (index < 0) {\n                index = allColors.length + index;\n            }\n            if (index >= allColors.length) {\n                index = index % allColors.length;\n            }\n            answers.push(allColors[index]);\n        }\n        return answers;\n    }\n    /**\n     * A color that complements the input color aesthetically.\n     *\n     * In art, this is usually described as being across the color wheel.\n     * History of this shows intent as a color that is just as cool-warm as the\n     * input color is warm-cool.\n     */\n    get complement() {\n        if (this.complementCache != null) {\n            return this.complementCache;\n        }\n        const coldestHue = this.coldest.hue;\n        const coldestTemp = this.tempsByHct.get(this.coldest);\n        const warmestHue = this.warmest.hue;\n        const warmestTemp = this.tempsByHct.get(this.warmest);\n        const range = warmestTemp - coldestTemp;\n        const startHueIsColdestToWarmest = TemperatureCache.isBetween(this.input.hue, coldestHue, warmestHue);\n        const startHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;\n        const endHue = startHueIsColdestToWarmest ? coldestHue : warmestHue;\n        const directionOfRotation = 1.0;\n        let smallestError = 1000.0;\n        let answer = this.hctsByHue[Math.round(this.input.hue)];\n        const complementRelativeTemp = 1.0 - this.inputRelativeTemperature;\n        // Find the color in the other section, closest to the inverse percentile\n        // of the input color. This is the complement.\n        for (let hueAddend = 0.0; hueAddend <= 360.0; hueAddend += 1.0) {\n            const hue = mathUtils.sanitizeDegreesDouble(startHue + directionOfRotation * hueAddend);\n            if (!TemperatureCache.isBetween(hue, startHue, endHue)) {\n                continue;\n            }\n            const possibleAnswer = this.hctsByHue[Math.round(hue)];\n            const relativeTemp = (this.tempsByHct.get(possibleAnswer) - coldestTemp) / range;\n            const error = Math.abs(complementRelativeTemp - relativeTemp);\n            if (error < smallestError) {\n                smallestError = error;\n                answer = possibleAnswer;\n            }\n        }\n        this.complementCache = answer;\n        return this.complementCache;\n    }\n    /**\n     * Temperature relative to all colors with the same chroma and tone.\n     * Value on a scale from 0 to 1.\n     */\n    relativeTemperature(hct) {\n        const range = this.tempsByHct.get(this.warmest) - this.tempsByHct.get(this.coldest);\n        const differenceFromColdest = this.tempsByHct.get(hct) - this.tempsByHct.get(this.coldest);\n        // Handle when there's no difference in temperature between warmest and\n        // coldest: for example, at T100, only one color is available, white.\n        if (range === 0.0) {\n            return 0.5;\n        }\n        return differenceFromColdest / range;\n    }\n    /** Relative temperature of the input color. See [relativeTemperature]. */\n    get inputRelativeTemperature() {\n        if (this.inputRelativeTemperatureCache >= 0.0) {\n            return this.inputRelativeTemperatureCache;\n        }\n        this.inputRelativeTemperatureCache = this.relativeTemperature(this.input);\n        return this.inputRelativeTemperatureCache;\n    }\n    /** A Map with keys of HCTs in [hctsByTemp], values of raw temperature. */\n    get tempsByHct() {\n        if (this.tempsByHctCache.size > 0) {\n            return this.tempsByHctCache;\n        }\n        const allHcts = this.hctsByHue.concat([this.input]);\n        const temperaturesByHct = new Map();\n        for (const e of allHcts) {\n            temperaturesByHct.set(e, TemperatureCache.rawTemperature(e));\n        }\n        this.tempsByHctCache = temperaturesByHct;\n        return temperaturesByHct;\n    }\n    /**\n     * HCTs for all hues, with the same chroma/tone as the input.\n     * Sorted ascending, hue 0 to 360.\n     */\n    get hctsByHue() {\n        if (this.hctsByHueCache.length > 0) {\n            return this.hctsByHueCache;\n        }\n        const hcts = [];\n        for (let hue = 0.0; hue <= 360.0; hue += 1.0) {\n            const colorAtHue = Hct.from(hue, this.input.chroma, this.input.tone);\n            hcts.push(colorAtHue);\n        }\n        this.hctsByHueCache = hcts;\n        return this.hctsByHueCache;\n    }\n    /** Determines if an angle is between two other angles, rotating clockwise. */\n    static isBetween(angle, a, b) {\n        if (a < b) {\n            return a <= angle && angle <= b;\n        }\n        return a <= angle || angle <= b;\n    }\n    /**\n     * Value representing cool-warm factor of a color.\n     * Values below 0 are considered cool, above, warm.\n     *\n     * Color science has researched emotion and harmony, which art uses to select\n     * colors. Warm-cool is the foundation of analogous and complementary colors.\n     * See:\n     * - Li-Chen Ou's Chapter 19 in Handbook of Color Psychology (2015).\n     * - Josef Albers' Interaction of Color chapters 19 and 21.\n     *\n     * Implementation of Ou, Woodcock and Wright's algorithm, which uses\n     * L*a*b* / LCH color space.\n     * Return value has these properties:\n     * - Values below 0 are cool, above 0 are warm.\n     * - Lower bound: -0.52 - (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n     *   Assuming max of 130 chroma, -9.66.\n     * - Upper bound: -0.52 + (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n     *   Assuming max of 130 chroma, 8.61.\n     */\n    static rawTemperature(color) {\n        const lab = colorUtils.labFromArgb(color.toInt());\n        const hue = mathUtils.sanitizeDegreesDouble(Math.atan2(lab[2], lab[1]) * 180.0 / Math.PI);\n        const chroma = Math.sqrt((lab[1] * lab[1]) + (lab[2] * lab[2]));\n        const temperature = -0.5 +\n            0.02 * Math.pow(chroma, 1.07) *\n                Math.cos(mathUtils.sanitizeDegreesDouble(hue - 50.0) * Math.PI / 180.0);\n        return temperature;\n    }\n}\n//# sourceMappingURL=temperature_cache.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport * as mathUtils from './math_utils.js';\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\nconst SRGB_TO_XYZ = [\n    [0.41233895, 0.35762064, 0.18051042],\n    [0.2126, 0.7152, 0.0722],\n    [0.01932141, 0.11916382, 0.95034478],\n];\nconst XYZ_TO_SRGB = [\n    [\n        3.2413774792388685,\n        -1.5376652402851851,\n        -0.49885366846268053,\n    ],\n    [\n        -0.9691452513005321,\n        1.8758853451067872,\n        0.04156585616912061,\n    ],\n    [\n        0.05562093689691305,\n        -0.20395524564742123,\n        1.0571799111220335,\n    ],\n];\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red, green, blue) {\n    return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n        0;\n}\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb) {\n    const r = delinearized(linrgb[0]);\n    const g = delinearized(linrgb[1]);\n    const b = delinearized(linrgb[2]);\n    return argbFromRgb(r, g, b);\n}\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb) {\n    return argb >> 24 & 255;\n}\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb) {\n    return argb >> 16 & 255;\n}\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb) {\n    return argb >> 8 & 255;\n}\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb) {\n    return argb & 255;\n}\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb) {\n    return alphaFromArgb(argb) >= 255;\n}\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x, y, z) {\n    const matrix = XYZ_TO_SRGB;\n    const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n    const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n    const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n    const r = delinearized(linearR);\n    const g = delinearized(linearG);\n    const b = delinearized(linearB);\n    return argbFromRgb(r, g, b);\n}\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb) {\n    const r = linearized(redFromArgb(argb));\n    const g = linearized(greenFromArgb(argb));\n    const b = linearized(blueFromArgb(argb));\n    return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l, a, b) {\n    const whitePoint = WHITE_POINT_D65;\n    const fy = (l + 16.0) / 116.0;\n    const fx = a / 500.0 + fy;\n    const fz = fy - b / 200.0;\n    const xNormalized = labInvf(fx);\n    const yNormalized = labInvf(fy);\n    const zNormalized = labInvf(fz);\n    const x = xNormalized * whitePoint[0];\n    const y = yNormalized * whitePoint[1];\n    const z = zNormalized * whitePoint[2];\n    return argbFromXyz(x, y, z);\n}\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb) {\n    const linearR = linearized(redFromArgb(argb));\n    const linearG = linearized(greenFromArgb(argb));\n    const linearB = linearized(blueFromArgb(argb));\n    const matrix = SRGB_TO_XYZ;\n    const x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n    const y = matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n    const z = matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n    const whitePoint = WHITE_POINT_D65;\n    const xNormalized = x / whitePoint[0];\n    const yNormalized = y / whitePoint[1];\n    const zNormalized = z / whitePoint[2];\n    const fx = labF(xNormalized);\n    const fy = labF(yNormalized);\n    const fz = labF(zNormalized);\n    const l = 116.0 * fy - 16;\n    const a = 500.0 * (fx - fy);\n    const b = 200.0 * (fy - fz);\n    return [l, a, b];\n}\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar) {\n    const y = yFromLstar(lstar);\n    const component = delinearized(y);\n    return argbFromRgb(component, component, component);\n}\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb) {\n    const y = xyzFromArgb(argb)[1];\n    return 116.0 * labF(y / 100.0) - 16.0;\n}\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar) {\n    return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y) {\n    return labF(y / 100.0) * 116.0 - 16.0;\n}\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent) {\n    const normalized = rgbComponent / 255.0;\n    if (normalized <= 0.040449936) {\n        return normalized / 12.92 * 100.0;\n    }\n    else {\n        return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n    }\n}\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent) {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n    }\n    else {\n        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65() {\n    return WHITE_POINT_D65;\n}\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb) {\n    const r = redFromArgb(argb);\n    const g = greenFromArgb(argb);\n    const b = blueFromArgb(argb);\n    const a = alphaFromArgb(argb);\n    return { r, g, b, a };\n}\n/**\n * Return int32 color from a given RGBA component\n *\n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba({ r, g, b, a }) {\n    const rValue = clampComponent(r);\n    const gValue = clampComponent(g);\n    const bValue = clampComponent(b);\n    const aValue = clampComponent(a);\n    return (aValue << 24) | (rValue << 16) | (gValue << 8) | bValue;\n}\nfunction clampComponent(value) {\n    if (value < 0)\n        return 0;\n    if (value > 255)\n        return 255;\n    return value;\n}\nfunction labF(t) {\n    const e = 216.0 / 24389.0;\n    const kappa = 24389.0 / 27.0;\n    if (t > e) {\n        return Math.pow(t, 1.0 / 3.0);\n    }\n    else {\n        return (kappa * t + 16) / 116;\n    }\n}\nfunction labInvf(ft) {\n    const e = 216.0 / 24389.0;\n    const kappa = 24389.0 / 27.0;\n    const ft3 = ft * ft * ft;\n    if (ft3 > e) {\n        return ft3;\n    }\n    else {\n        return (116 * ft - 16) / kappa;\n    }\n}\n//# sourceMappingURL=color_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { QuantizerCelebi } from '../quantize/quantizer_celebi.js';\nimport { Score } from '../score/score.js';\nimport { argbFromRgb } from './color_utils.js';\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image) {\n    // Convert Image data to Pixel Array\n    const imageBytes = await new Promise((resolve, reject) => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        if (!context) {\n            reject(new Error('Could not get canvas context'));\n            return;\n        }\n        const callback = () => {\n            canvas.width = image.width;\n            canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n            let rect = [0, 0, image.width, image.height];\n            const area = image.dataset['area'];\n            if (area && /^\\d+(\\s*,\\s*\\d+){3}$/.test(area)) {\n                rect = area.split(/\\s*,\\s*/).map(s => {\n                    // tslint:disable-next-line:ban\n                    return parseInt(s, 10);\n                });\n            }\n            const [sx, sy, sw, sh] = rect;\n            resolve(context.getImageData(sx, sy, sw, sh).data);\n        };\n        if (image.complete) {\n            callback();\n        }\n        else {\n            image.onload = callback;\n        }\n    });\n    // Convert Image data to Pixel Array\n    const pixels = [];\n    for (let i = 0; i < imageBytes.length; i += 4) {\n        const r = imageBytes[i];\n        const g = imageBytes[i + 1];\n        const b = imageBytes[i + 2];\n        const a = imageBytes[i + 3];\n        if (a < 255) {\n            continue;\n        }\n        const argb = argbFromRgb(r, g, b);\n        pixels.push(argb);\n    }\n    // Convert Pixels to Material Colors\n    const result = QuantizerCelebi.quantize(pixels, 128);\n    const ranked = Score.score(result);\n    const top = ranked[0];\n    return top;\n}\n//# sourceMappingURL=image_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\n/**\n * Utility methods for mathematical operations.\n */\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num) {\n    if (num < 0) {\n        return -1;\n    }\n    else if (num === 0) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start, stop, amount) {\n    return (1.0 - amount) * start + amount * stop;\n}\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min, max, input) {\n    if (input < min) {\n        return min;\n    }\n    else if (input > max) {\n        return max;\n    }\n    return input;\n}\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min, max, input) {\n    if (input < min) {\n        return min;\n    }\n    else if (input > max) {\n        return max;\n    }\n    return input;\n}\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees) {\n    degrees = degrees % 360;\n    if (degrees < 0) {\n        degrees = degrees + 360;\n    }\n    return degrees;\n}\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees) {\n    degrees = degrees % 360.0;\n    if (degrees < 0) {\n        degrees = degrees + 360.0;\n    }\n    return degrees;\n}\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from, to) {\n    const increasingDifference = sanitizeDegreesDouble(to - from);\n    return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a, b) {\n    return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row, matrix) {\n    const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n    const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n    const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n    return [a, b, c];\n}\n//# sourceMappingURL=math_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as colorUtils from './color_utils.js';\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport function hexFromArgb(argb) {\n    const r = colorUtils.redFromArgb(argb);\n    const g = colorUtils.greenFromArgb(argb);\n    const b = colorUtils.blueFromArgb(argb);\n    const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n    // Pad single-digit output values\n    for (const [i, part] of outParts.entries()) {\n        if (part.length === 1) {\n            outParts[i] = '0' + part;\n        }\n    }\n    return '#' + outParts.join('');\n}\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport function argbFromHex(hex) {\n    hex = hex.replace('#', '');\n    const isThree = hex.length === 3;\n    const isSix = hex.length === 6;\n    const isEight = hex.length === 8;\n    if (!isThree && !isSix && !isEight) {\n        throw new Error('unexpected hex ' + hex);\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (isThree) {\n        r = parseIntHex(hex.slice(0, 1).repeat(2));\n        g = parseIntHex(hex.slice(1, 2).repeat(2));\n        b = parseIntHex(hex.slice(2, 3).repeat(2));\n    }\n    else if (isSix) {\n        r = parseIntHex(hex.slice(0, 2));\n        g = parseIntHex(hex.slice(2, 4));\n        b = parseIntHex(hex.slice(4, 6));\n    }\n    else if (isEight) {\n        r = parseIntHex(hex.slice(2, 4));\n        g = parseIntHex(hex.slice(4, 6));\n        b = parseIntHex(hex.slice(6, 8));\n    }\n    return (((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n        0);\n}\nfunction parseIntHex(value) {\n    // tslint:disable-next-line:ban\n    return parseInt(value, 16);\n}\n//# sourceMappingURL=string_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blend } from '../blend/blend.js';\nimport { CorePalette } from '../palettes/core_palette.js';\nimport { Scheme } from '../scheme/scheme.js';\nimport { sourceColorFromImage } from './image_utils.js';\nimport { hexFromArgb } from './string_utils.js';\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(source, customColors = []) {\n    const palette = CorePalette.of(source);\n    return {\n        source,\n        schemes: {\n            light: Scheme.light(source),\n            dark: Scheme.dark(source),\n        },\n        palettes: {\n            primary: palette.a1,\n            secondary: palette.a2,\n            tertiary: palette.a3,\n            neutral: palette.n1,\n            neutralVariant: palette.n2,\n            error: palette.error,\n        },\n        customColors: customColors.map((c) => customColor(source, c)),\n    };\n}\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(image, customColors = []) {\n    const source = await sourceColorFromImage(image);\n    return themeFromSourceColor(source, customColors);\n}\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(source, color) {\n    let value = color.value;\n    const from = value;\n    const to = source;\n    if (color.blend) {\n        value = Blend.harmonize(from, to);\n    }\n    const palette = CorePalette.of(value);\n    const tones = palette.a1;\n    return {\n        color,\n        value,\n        light: {\n            color: tones.tone(40),\n            onColor: tones.tone(100),\n            colorContainer: tones.tone(90),\n            onColorContainer: tones.tone(10),\n        },\n        dark: {\n            color: tones.tone(80),\n            onColor: tones.tone(20),\n            colorContainer: tones.tone(30),\n            onColorContainer: tones.tone(90),\n        },\n    };\n}\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(theme, options) {\n    const target = options?.target || document.body;\n    const isDark = options?.dark ?? false;\n    const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n    setSchemeProperties(target, scheme);\n    if (options?.brightnessSuffix) {\n        setSchemeProperties(target, theme.schemes.dark, '-dark');\n        setSchemeProperties(target, theme.schemes.light, '-light');\n    }\n    if (options?.paletteTones) {\n        const tones = options?.paletteTones ?? [];\n        for (const [key, palette] of Object.entries(theme.palettes)) {\n            const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n            for (const tone of tones) {\n                const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n                const color = hexFromArgb(palette.tone(tone));\n                target.style.setProperty(token, color);\n            }\n        }\n    }\n}\nfunction setSchemeProperties(target, scheme, suffix = '') {\n    for (const [key, value] of Object.entries(scheme.toJSON())) {\n        const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        const color = hexFromArgb(value);\n        target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n    }\n}\n//# sourceMappingURL=theme_utils.js.map","export * from \"./src/material-colors.js\";\r\n","import {\r\n  argbFromHex,\r\n  hexFromArgb,\r\n  Hct,\r\n  MaterialDynamicColors,\r\n  SchemeContent,\r\n  SchemeExpressive,\r\n  SchemeFidelity,\r\n  SchemeMonochrome,\r\n  SchemeNeutral,\r\n  SchemeTonalSpot,\r\n  SchemeVibrant,\r\n  SchemeRainbow,\r\n  SchemeFruitSalad,\r\n  QuantizerCelebi,\r\n  Score,\r\n} from \"../../@material/material-color-utilities/index.js\";\r\n\r\nfunction setColorFromScheme([mode, contrast, scheme], colorName) {\r\n  const palette = MaterialDynamicColors[colorName];\r\n  if (palette) {\r\n    const color = hexFromArgb(palette.getArgb(scheme));\r\n    const originalName = palette.name;\r\n    const propertyName = originalName.replace(/_/g, \"-\");\r\n    const styleProperty = `--${mode}-${contrast}-${propertyName}`;\r\n    document.documentElement.style.setProperty(styleProperty, color);\r\n  } else console.error(`${paletteName} doesn't exist!`);\r\n}\r\n\r\nfunction colorScheme(sourceColor, type, mode, contrast) {\r\n  const hct = Hct.fromInt(argbFromHex(sourceColor));\r\n\r\n  let isDark;\r\n  if (mode === \"light\") isDark = false;\r\n  else if (mode === \"dark\") isDark = true;\r\n  else console.error(\"mode must be light or dark!\");\r\n\r\n  let contrastLevel;\r\n  if (contrast === \"default\") contrastLevel = 0.0;\r\n  else if (contrast === \"medium\") contrastLevel = 0.5;\r\n  else if (contrast === \"high\") contrastLevel = 1.0;\r\n  else if (contrast === \"reduced\") contrastLevel = -1.0;\r\n  else console.error(\"contrast type error!\");\r\n\r\n  if (typeof type === \"string\") {\r\n    type = type.toLowerCase();\r\n  } else {\r\n    console.error(\"type is not a string\");\r\n  }\r\n  let scheme;\r\n  if (type === \"content\") {\r\n    scheme = new SchemeContent(hct, isDark, contrastLevel);\r\n  } else if (type === \"expressive\") {\r\n    scheme = new SchemeExpressive(hct, isDark, contrastLevel);\r\n  } else if (type === \"fidelity\") {\r\n    scheme = new SchemeFidelity(hct, isDark, contrastLevel);\r\n  } else if (type === \"fruitsalad\") {\r\n    scheme = new SchemeFruitSalad(hct, isDark, contrastLevel);\r\n  } else if (type === \"monochrome\") {\r\n    scheme = new SchemeMonochrome(hct, isDark, contrastLevel);\r\n  } else if (type === \"rainbow\") {\r\n    scheme = new SchemeRainbow(hct, isDark, contrastLevel);\r\n  } else if (type === \"tonalspot\") {\r\n    scheme = new SchemeTonalSpot(hct, isDark, contrastLevel);\r\n  } else if (type === \"vibrant\") {\r\n    scheme = new SchemeVibrant(hct, isDark, contrastLevel);\r\n  } else if (type === \"neutral\") {\r\n    scheme = new SchemeNeutral(hct, isDark, contrastLevel);\r\n  } else console.error(\"scheme type error\");\r\n\r\n  return [mode, contrast, scheme];\r\n}\r\n\r\nexport function updateColors(sourceColor, schemeType = \"tonalspot\") {\r\n  const mode = [\"light\", \"dark\"];\r\n  const contrast = [\"default\", \"medium\", \"high\"];\r\n  const colorName = [\r\n    \"background\",\r\n    \"onBackground\",\r\n    \"surface\",\r\n    \"surfaceDim\",\r\n    \"surfaceBright\",\r\n    \"surfaceContainerLowest\",\r\n    \"surfaceContainerLow\",\r\n    \"surfaceContainer\",\r\n    \"surfaceContainerHigh\",\r\n    \"surfaceContainerHighest\",\r\n    \"onSurface\",\r\n    \"surfaceVariant\",\r\n    \"onSurfaceVariant\",\r\n    \"inverseSurface\",\r\n    \"inverseOnSurface\",\r\n    \"outline\",\r\n    \"outlineVariant\",\r\n    \"shadow\",\r\n    \"scrim\",\r\n    \"surfaceTint\",\r\n    \"primary\",\r\n    \"onPrimary\",\r\n    \"primaryContainer\",\r\n    \"onPrimaryContainer\",\r\n    \"inversePrimary\",\r\n    \"secondary\",\r\n    \"onSecondary\",\r\n    \"secondaryContainer\",\r\n    \"onSecondaryContainer\",\r\n    \"tertiary\",\r\n    \"onTertiary\",\r\n    \"tertiaryContainer\",\r\n    \"onTertiaryContainer\",\r\n    \"error\",\r\n    \"onError\",\r\n    \"errorContainer\",\r\n    \"onErrorContainer\",\r\n    \"primaryFixed\",\r\n    \"primaryFixedDim\",\r\n    \"onPrimaryFixed\",\r\n    \"onPrimaryFixedVariant\",\r\n    \"secondaryFixed\",\r\n    \"secondaryFixedDim\",\r\n    \"onSecondaryFixed\",\r\n    \"onSecondaryFixedVariant\",\r\n    \"tertiaryFixed\",\r\n    \"tertiaryFixedDim\",\r\n    \"onTertiaryFixed\",\r\n    \"onTertiaryFixedVariant\",\r\n  ];\r\n\r\n  mode.forEach((mo) => {\r\n    contrast.forEach((co) => {\r\n      const param = colorScheme(sourceColor, schemeType, mo, co);\r\n      colorName.forEach((cn) => {\r\n        setColorFromScheme(param, cn);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// color from image\r\nfunction convertImageToARGB(file) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!file || !file.type.startsWith(\"image/\")) {\r\n      reject(\"Invalid file type\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      const img = new Image();\r\n      img.onload = function () {\r\n        const maxDimension = 128;\r\n        let width = img.width;\r\n        let height = img.height;\r\n\r\n        if (width > maxDimension || height > maxDimension) {\r\n          if (width > height) {\r\n            height = Math.round((height * maxDimension) / width);\r\n            width = maxDimension;\r\n          } else {\r\n            width = Math.round((width * maxDimension) / height);\r\n            height = maxDimension;\r\n          }\r\n        }\r\n\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const pixels = imageDataToARGB(imageData);\r\n        resolve(pixels);\r\n      };\r\n      img.src = e.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nfunction imageDataToARGB(imageData) {\r\n  const width = imageData.width;\r\n  const height = imageData.height;\r\n  const data = imageData.data;\r\n  const pixels = new Array(width * height);\r\n\r\n  for (let i = 0; i < data.length; i += 4) {\r\n    const r = data[i];\r\n    const g = data[i + 1];\r\n    const b = data[i + 2];\r\n    const a = data[i + 3];\r\n    const argb = (a << 24) | (r << 16) | (g << 8) | b;\r\n    pixels[i / 4] = argb;\r\n  }\r\n  return pixels;\r\n}\r\n\r\nexport function updateColorFromImage(file, scheme = \"tonalspot\") {\r\n  convertImageToARGB(file).then((pixels) => {\r\n    const quantizerResult = QuantizerCelebi.quantize(pixels, 128);\r\n    const colors = Score.score(quantizerResult);\r\n    // console.log(hexFromArgb(colors[0]))\r\n    updateColors(hexFromArgb(colors[0]), scheme);\r\n  });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { updateColors, updateColorFromImage } from \"material-color-css\";\r\n\r\nlet scheme;\r\nlet colorFromStorage;\r\n\r\nchrome.storage.local.get([\"readeaser_colorFromStorage\"]).then((res) => {\r\n  colorFromStorage = res[\"readeaser_colorFromStorage\"] || \"#769CDF\";\r\n  if (scheme) {\r\n    updateColors(colorFromStorage, scheme);\r\n  } else {\r\n    updateColors(colorFromStorage);\r\n  }\r\n});\r\n\r\nconst color = document.querySelector('input[type=\"color\"]');\r\ncolor.addEventListener(\"input\", (e) => {\r\n  const color = e.target.value;\r\n  chrome.storage.local.set({ readeaser_colorFromStorage: color });\r\n  if (scheme) {\r\n    updateColors(color, scheme);\r\n  } else {\r\n    updateColors(color);\r\n  }\r\n});\r\n\r\nClickMap(\".imagebutton\", \"#imageInput\");\r\nClickMap(\".fontbutton\", \"#fontUpload\");\r\nClickMap(\".colorbutton\", \".inputcolor\");\r\nClickMap(\".github\", \".githublink\");\r\nClickMap(\".xhs\", \".xhslink\");\r\n\r\nfunction ClickMap(button, link) {\r\n  document.querySelector(button).addEventListener(\"click\", () => {\r\n    document.querySelector(link).click();\r\n  });\r\n}\r\n\r\nshowDiv(\".donate\", \".donateboard\");\r\nshowDiv(\".color_menu\", \".color_style\");\r\nshowDiv(\".fontSelect\", \".fontList\");\r\nshowDiv(\".imageSelect\", \".imageList\");\r\nshowDiv(\".themeSelect\", \".themeList\");\r\n\r\nfunction showDiv(button, div) {\r\n  document.querySelector(button).addEventListener(\"click\", () => {\r\n    const donateboard = document.querySelector(div);\r\n    donateboard.style.display = \"block\";\r\n  });\r\n}\r\n\r\ndocument.querySelector(\".donateboard svg\").addEventListener(\"click\", () => {\r\n  const donateboard = document.querySelector(\".donateboard\");\r\n  donateboard.style.display = \"none\";\r\n});\r\n\r\ndocument.querySelectorAll(\".modes\").forEach((mode) => {\r\n  mode.addEventListener(\"click\", () => {\r\n    mode.style.display = \"none\";\r\n  });\r\n});\r\n\r\nlet c = \"default\";\r\nlet m = \"light\";\r\nconst body = document.querySelector(\"body\");\r\n\r\nconst contrasts = document.querySelectorAll(\"input[name='contrast']\");\r\ncontrasts.forEach((contrast) => {\r\n  contrast.addEventListener(\"change\", () => {\r\n    contrasts.forEach((contrast) => {\r\n      const svg = document.querySelector(`.${contrast.value}_contrast`);\r\n      if (svg) {\r\n        if (svg.classList.contains(\"selectedsvg\")) {\r\n          svg.classList.remove(\"selectedsvg\");\r\n        }\r\n        if (contrast.checked) {\r\n          svg.classList.add(\"selectedsvg\");\r\n          c = contrast.value;\r\n          body.classList.remove(...body.classList);\r\n          body.classList.add(`${m}_${c}_contrast`);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\nconst modes = document.querySelectorAll(\"input[name='mode']\");\r\nmodes.forEach((mode) => {\r\n  mode.addEventListener(\"change\", () => {\r\n    modes.forEach((mode) => {\r\n      const svg = document.querySelector(`.${mode.value}_mode`);\r\n      if (svg) {\r\n        if (svg.classList.contains(\"selectedsvg\")) {\r\n          svg.classList.remove(\"selectedsvg\");\r\n        }\r\n        if (mode.checked) {\r\n          svg.classList.add(\"selectedsvg\");\r\n          m = mode.value;\r\n          body.classList.remove(...body.classList);\r\n          body.classList.add(`${m}_${c}_contrast`);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\nconst vars = document.querySelectorAll(\".color_style .options div\");\r\nvars.forEach((varr) => {\r\n  varr.addEventListener(\"click\", (e) => {\r\n    vars.forEach((v) => {\r\n      v.classList.remove(\"selected\");\r\n    });\r\n    e.target.classList.add(\"selected\");\r\n    let textContent = e.target.id;\r\n    let trimmedText = textContent.replace(/\\s+/g, \"\");\r\n    scheme = trimmedText;\r\n    // updateColors(\"#769CDF\", scheme);\r\n    chrome.storage.local.get([\"readeaser_colorFromStorage\"]).then((res) => {\r\n      colorFromStorage = res[\"readeaser_colorFromStorage\"] || \"#769CDF\";\r\n      updateColors(colorFromStorage, scheme);\r\n    });\r\n  });\r\n});\r\n\r\nselected(\".fontList .option\", \".fontSelect\");\r\nselected(\".themeList .option\", \".themeSelect\");\r\nselected(\".imageList .option\", \".imageSelect\");\r\n\r\nfunction selected(options, select) {\r\n  const vars = document.querySelectorAll(`${options}`);\r\n  vars.forEach((varr) => {\r\n    varr.addEventListener(\"click\", (e) => {\r\n      vars.forEach((v) => {\r\n        v.classList.remove(\"selected\");\r\n      });\r\n      e.target.classList.add(\"selected\");\r\n      const s = document.querySelector(`${select}`);\r\n      s.textContent = e.target.textContent;\r\n    });\r\n  });\r\n}\r\n\r\nfunction updateRangeColor(range, value) {\r\n  const max = range.max || 100;\r\n  const min = range.min || 0;\r\n\r\n  const percentage = ((((value - min) / (max - min)) * 13) / 15 + 1 / 15) * 100;\r\n\r\n  range.style.background = `linear-gradient(to right, var(--primary-color) ${percentage}%, var(--textboard-color) ${percentage}%)`;\r\n}\r\n\r\nfunction realTimeColor(el) {\r\n  updateRangeColor(el, el.value);\r\n  el.addEventListener(\"input\", function () {\r\n    updateRangeColor(el, this.value);\r\n  });\r\n}\r\n\r\nconst slides = document.querySelectorAll(\".option_slide input\");\r\nif (slides) {\r\n  slides.forEach((slide) => {\r\n    realTimeColor(slide);\r\n  });\r\n}\r\n\r\nconst exIcon = document.querySelector(\".ex_icon\");\r\nconst fileInput = document.querySelector(\"#imageInput\");\r\n\r\nfunction handleFileChange(event) {\r\n  const file = event.target.files[0];\r\n  if (file) {\r\n    if (scheme) {\r\n      updateColorFromImage(file, scheme);\r\n    } else {\r\n      updateColorFromImage(file);\r\n    }\r\n  }\r\n}\r\n\r\nexIcon.addEventListener(\"click\", () => {\r\n  exIcon.classList.toggle(\"on\");\r\n\r\n  if (exIcon.classList.contains(\"on\")) {\r\n    console.log(\"on\");\r\n    fileInput.addEventListener(\"change\", handleFileChange);\r\n  } else {\r\n    fileInput.removeEventListener(\"change\", handleFileChange);\r\n    fileInput.value = \"\";\r\n  }\r\n});\r\n\r\nconst radios = document.querySelectorAll(\"input[type='radio']\");\r\nradios.forEach((radio) => {\r\n  radio.addEventListener(\"change\", (e) => {\r\n    const id = e.target.id;\r\n    const name = e.target.name;\r\n    const texts = document.querySelectorAll(`p[name=${name}`);\r\n    texts.forEach((p) => {\r\n      if (p.classList.contains(\"checked\")) {\r\n        p.classList.remove(\"checked\");\r\n      }\r\n    });\r\n    const p = document.querySelector(`.${id}`);\r\n    p.classList.add(\"checked\");\r\n  });\r\n});\r\n\r\neventMap(\".light_dark\", \".content\", \"light_dark\", \"mode\");\r\neventMap(\".color_contrast\", \".content\", \"color_contrast\", \"contrast\");\r\n\r\nfunction eventMap(form1, form2, name1, name2) {\r\n  const darkColorForm = document.querySelector(`${form1}`);\r\n  const darkButtonForm = document.querySelector(`${form2}`);\r\n\r\n  darkColorForm.addEventListener(\"change\", (event) => {\r\n    if (event.target.name === `${name1}`) {\r\n      const mapValue = event.target.getAttribute(\"value\");\r\n      if (mapValue) {\r\n        const correspondingRadio = darkButtonForm.querySelector(\r\n          `input[data-map=\"${mapValue}\"]`\r\n        );\r\n        if (correspondingRadio) {\r\n          correspondingRadio.click();\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  darkButtonForm.addEventListener(\"change\", (event) => {\r\n    if (event.target.name === `${name2}`) {\r\n      const mapValue = event.target.getAttribute(\"value\");\r\n\r\n      if (mapValue) {\r\n        const correspondingRadio = darkColorForm.querySelector(\r\n          `input[data-map=\"${mapValue}\"]`\r\n        );\r\n        if (correspondingRadio) {\r\n          correspondingRadio.click();\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nlet db;\r\n\r\nwindow.onload = function () {\r\n  initDB();\r\n\r\n  document\r\n    .querySelector(\"#fontUpload\")\r\n    .addEventListener(\r\n      \"input\",\r\n      createHandleFileUpload(\r\n        \"fonts\",\r\n        \".fontList .options\",\r\n        \".fontList .option\",\r\n        \".fontSelect\",\r\n        applyFont\r\n      )\r\n    );\r\n\r\n  document.querySelectorAll(\".fontList .option\").forEach((font) => {\r\n    font.addEventListener(\"click\", applyFont);\r\n  });\r\n\r\n  document\r\n    .querySelector(\"#imageInput\")\r\n    .addEventListener(\r\n      \"input\",\r\n      createHandleFileUpload(\r\n        \"image\",\r\n        \".imageList .options\",\r\n        \".imageList .option\",\r\n        \".imageSelect\",\r\n        applyImage\r\n      )\r\n    );\r\n\r\n  document.querySelectorAll(\".imageList .option\").forEach((image) => {\r\n    image.addEventListener(\"click\", applyImage);\r\n  });\r\n\r\n  document\r\n    .querySelector(\".theme_save\")\r\n    .addEventListener(\r\n      \"click\",\r\n      createHandleDataUpload(\r\n        \"theme\",\r\n        \".themeList .options\",\r\n        \".themeList .option\",\r\n        \".themeSelect\",\r\n        applyTheme\r\n      )\r\n    );\r\n};\r\n\r\nfunction initDB() {\r\n  const request = indexedDB.open(\"readeaserDB\", 1);\r\n\r\n  request.onerror = function (event) {\r\n    console.log(\"Error opening IndexedDB:\", event);\r\n  };\r\n\r\n  request.onsuccess = function (event) {\r\n    db = event.target.result;\r\n    loadStorage(\r\n      \"fonts\",\r\n      \".fontList .options\",\r\n      \".fontList .option\",\r\n      \".fontSelect\",\r\n      applyFont\r\n    );\r\n    loadStorage(\r\n      \"image\",\r\n      \".imageList .options\",\r\n      \".imageList .option\",\r\n      \".imageSelect\",\r\n      applyImage\r\n    );\r\n    loadStorage(\r\n      \"theme\",\r\n      \".themeList .options\",\r\n      \".themeList .option\",\r\n      \".themeSelect\",\r\n      applyTheme\r\n    );\r\n  };\r\n\r\n  request.onupgradeneeded = function (event) {\r\n    db = event.target.result;\r\n    if (!db.objectStoreNames.contains(\"fonts\")) {\r\n      db.createObjectStore(\"fonts\", { keyPath: \"name\" });\r\n    }\r\n\r\n    if (!db.objectStoreNames.contains(\"image\")) {\r\n      db.createObjectStore(\"image\", { keyPath: \"name\" });\r\n    }\r\n    if (!db.objectStoreNames.contains(\"theme\")) {\r\n      db.createObjectStore(\"theme\", { keyPath: \"name\" });\r\n    }\r\n  };\r\n}\r\n\r\nfunction createHandleFileUpload(\r\n  fileType,\r\n  listsName,\r\n  listName,\r\n  select,\r\n  applyFunction\r\n) {\r\n  return function (e) {\r\n    handleFileUpload(e, fileType, listsName, listName, select, applyFunction);\r\n  };\r\n}\r\n\r\nfunction createHandleDataUpload(\r\n  fileType,\r\n  listsName,\r\n  listName,\r\n  select,\r\n  applyFunction\r\n) {\r\n  return function (e) {\r\n    handleDataUpload(e, fileType, listsName, listName, select, applyFunction);\r\n  };\r\n}\r\n\r\nfunction createRemoveFromList(fileType) {\r\n  return function (e) {\r\n    // e.stopPropagation();\r\n    removeFromList(e, fileType);\r\n  };\r\n}\r\n\r\nfunction handleFileUpload(\r\n  e,\r\n  fileType,\r\n  listsName,\r\n  listName,\r\n  select,\r\n  applyFunction\r\n) {\r\n  // file = file || e.target.files[0];\r\n  const file = e.target.files[0];\r\n  handleUpload(e, file, fileType, listsName, listName, select, applyFunction);\r\n}\r\n\r\nfunction handleDataUpload(\r\n  e,\r\n  fileType,\r\n  listsName,\r\n  listName,\r\n  select,\r\n  applyFunction\r\n) {\r\n  const board = document.querySelector(\".textboard\");\r\n  const back = document.querySelector(\".text_content_back\");\r\n  const text = document.querySelector(\".ch\");\r\n  const dark = document.querySelector(\"input[name='mode']:checked\");\r\n\r\n  let isdark = false;\r\n  if (dark.value === \"dark\") isdark = true;\r\n\r\n  let bcolor = window.getComputedStyle(board).backgroundColor;\r\n  let fcolor = window.getComputedStyle(back).backgroundColor;\r\n  let fontFamily = window.getComputedStyle(text).fontFamily;\r\n  let fontWeight = window.getComputedStyle(text).fontWeight;\r\n  let backgroundImage = window.getComputedStyle(back).backgroundImage;\r\n  let backgroundRepeat = window.getComputedStyle(back).backgroundRepeat;\r\n  let backgroundSize = window.getComputedStyle(back).backgroundSize;\r\n  let filter = window.getComputedStyle(back).filter;\r\n\r\n  imageUrl();\r\n\r\n  async function imageUrl() {\r\n    console.log(backgroundImage);\r\n    if (backgroundImage && backgroundImage != \"none\") {\r\n      let image = await applyBlurToImageAndSave(backgroundImage, filter);\r\n      let data = {\r\n        isdark: isdark,\r\n        bcolor: bcolor,\r\n        fcolor: fcolor,\r\n        fontFamily: fontFamily,\r\n        fontWeight: fontWeight,\r\n        backgroundImage: backgroundImage,\r\n        backgroundRepeat: backgroundRepeat,\r\n        backgroundSize: backgroundSize,\r\n        filter: filter,\r\n        image: image,\r\n      };\r\n      data = JSON.stringify(data);\r\n      const blob = new Blob([data], { type: \"application/json\" });\r\n\r\n      // console.log(blob instanceof Blob);\r\n      console.log(\"image:\", image);\r\n\r\n      handleUpload(\r\n        e,\r\n        blob,\r\n        fileType,\r\n        listsName,\r\n        listName,\r\n        select,\r\n        applyFunction\r\n      );\r\n    } else {\r\n      let data = {\r\n        isdark: isdark,\r\n        bcolor: bcolor,\r\n        fcolor: fcolor,\r\n        fontFamily: fontFamily,\r\n        fontWeight: fontWeight,\r\n        backgroundImage: backgroundImage,\r\n        backgroundRepeat: backgroundRepeat,\r\n        backgroundSize: backgroundSize,\r\n        filter: filter,\r\n        // image: image,\r\n      };\r\n      data = JSON.stringify(data);\r\n      const blob = new Blob([data], { type: \"application/json\" });\r\n\r\n      // console.log(blob instanceof Blob);\r\n      // console.log(\"image:\", image);\r\n\r\n      handleUpload(\r\n        e,\r\n        blob,\r\n        fileType,\r\n        listsName,\r\n        listName,\r\n        select,\r\n        applyFunction\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nasync function applyBlurToImageAndSave(backgroundImage, filter) {\r\n  const backgroundImageURL = backgroundImage.slice(5, -2);\r\n\r\n  const img = new Image();\r\n  img.crossOrigin = \"Anonymous\";\r\n\r\n  const imageLoadPromise = new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = () => reject(new Error(\"图像加载失败，请检查URL是否正确。\"));\r\n  });\r\n\r\n  img.src = backgroundImageURL;\r\n\r\n  try {\r\n    await imageLoadPromise;\r\n\r\n    const canvas = document.createElement(\"canvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n\r\n    ctx.drawImage(img, 0, 0);\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.filter = filter;\r\n\r\n    ctx.drawImage(img, 0, 0);\r\n\r\n    const dataURL = canvas.toDataURL(\"image/webp\");\r\n    console.log(\"dataUrl\", dataURL);\r\n\r\n    return dataURL;\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction handleUpload(\r\n  e,\r\n  file,\r\n  fileType,\r\n  listsName,\r\n  listName,\r\n  select,\r\n  applyFunction\r\n) {\r\n  // file = file || e.target.files[0];\r\n  const customName = prompt(\"请输入名称:\", file.name);\r\n  if (!customName) {\r\n    alert(\"名称不能为空\");\r\n    e.target.value = \"\";\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n\r\n  reader.onload = function (event) {\r\n    const item = {\r\n      name: customName,\r\n      data: event.target.result,\r\n    };\r\n\r\n    const transaction = db.transaction([fileType], \"readwrite\");\r\n    const objectStore = transaction.objectStore(fileType);\r\n    const request = objectStore.add(item);\r\n\r\n    request.onsuccess = function () {\r\n      console.log(`Added ${fileType} to IndexedDB:`, item);\r\n      addToList(customName, listsName, listName, select, applyFunction);\r\n    };\r\n\r\n    request.onerror = function () {\r\n      console.log(`Error adding ${fileType} to IndexedDB:`, request.error);\r\n    };\r\n  };\r\n\r\n  reader.readAsDataURL(file);\r\n}\r\n\r\nfunction deleteFile(fileType, fileName) {\r\n  const transaction = db.transaction([fileType], \"readwrite\");\r\n  const objectStore = transaction.objectStore(fileType);\r\n  const request = objectStore.delete(fileName);\r\n  request.onsuccess = () => {\r\n    console.log(`文件 \"${fileName}\" 已从 IndexedDB 中删除。`);\r\n  };\r\n\r\n  request.onerror = (event) => {\r\n    console.error(\"删除文件时出错:\", event.target.error);\r\n  };\r\n}\r\n\r\nfunction removeFromList(e, fileType) {\r\n  console.log(\"try to delete\");\r\n  const option = e.target.parentElement;\r\n  const fileName = option.querySelector(\"div\").textContent;\r\n  console.log(option);\r\n  console.log(fileName);\r\n  const isConfirmed = confirm(`确定删除 \"${fileName}\" ？`);\r\n\r\n  if (isConfirmed) {\r\n    option.remove();\r\n    deleteFile(fileType, fileName);\r\n  }\r\n}\r\n\r\nfunction addToList(fileName, listsName, listName, select, applyFunction) {\r\n  const list = document.querySelector(listsName);\r\n  const option = document.createElement(\"div\");\r\n  option.className = \"option\";\r\n  option.innerHTML = `\r\n    <div>${fileName}</div>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#5f6368\">\r\n      <path d=\"m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z\"/>\r\n    </svg>`;\r\n  list.appendChild(option);\r\n  selected(listName, select);\r\n\r\n  document.querySelectorAll(listName).forEach((item) => {\r\n    item.addEventListener(\"click\", applyFunction);\r\n  });\r\n}\r\n\r\nfunction loadStorage(fileType, listsName, listName, select, applyFunction) {\r\n  const transaction = db.transaction([fileType], \"readonly\");\r\n  const objectStore = transaction.objectStore(fileType);\r\n\r\n  objectStore.openCursor().onsuccess = function (event) {\r\n    const cursor = event.target.result;\r\n    if (cursor) {\r\n      addToList(cursor.value.name, listsName, listName, select, applyFunction);\r\n      cursor.continue();\r\n    }\r\n  };\r\n}\r\n\r\nfunction applyFont(event) {\r\n  if (event.target.tagName === \"DIV\") {\r\n    applyFonts(event);\r\n  } else {\r\n    createRemoveFromList(\"fonts\")(event);\r\n  }\r\n}\r\n\r\nfunction applyFonts(event) {\r\n  console.log(\"apply font\");\r\n  const text = event.target.textContent;\r\n  const selectedFont = text.replace(/\\s+/g, \"\");\r\n\r\n  if (selectedFont === \"默认\") {\r\n    document.querySelector(\".ch\").style.fontFamily = \"\";\r\n    document.querySelector(\".en\").style.fontFamily = \"\";\r\n  } else {\r\n    const transaction = db.transaction([\"fonts\"], \"readonly\");\r\n    const objectStore = transaction.objectStore(\"fonts\");\r\n    const request = objectStore.get(selectedFont);\r\n\r\n    request.onsuccess = function (event) {\r\n      const font = event.target.result;\r\n\r\n      if (font && font.name && font.data) {\r\n        console.log(\"Font found in IndexedDB: \", font);\r\n\r\n        const newFontFace = new FontFace(font.name, `url(${font.data})`);\r\n\r\n        newFontFace\r\n          .load()\r\n          .then(function (loadedFont) {\r\n            if (!document.fonts.has(loadedFont)) {\r\n              document.fonts.add(loadedFont);\r\n            }\r\n            document.querySelector(\".ch\").style.fontFamily = font.name;\r\n            document.querySelector(\".en\").style.fontFamily = font.name;\r\n          })\r\n          .catch(function (error) {\r\n            console.error(\"Error loading font:\", error);\r\n          });\r\n      } else {\r\n        console.log(\"Font not found: \", selectedFont);\r\n      }\r\n    };\r\n\r\n    request.onerror = function (event) {\r\n      console.error(\"Error fetching font from IndexedDB: \", event);\r\n    };\r\n  }\r\n}\r\n\r\nfunction applyImage(event) {\r\n  if (event.target.tagName === \"DIV\") {\r\n    applyImg(event);\r\n  } else {\r\n    createRemoveFromList(\"image\")(event);\r\n  }\r\n}\r\n\r\nfunction applyImg(event) {\r\n  console.log(\"apply image\");\r\n  const text = event.target.textContent;\r\n  const selected = text.replace(/\\s+/g, \"\");\r\n\r\n  if (selected === \"默认\") {\r\n    document.querySelector(\".text_content_back\").style.background = \"\";\r\n  } else {\r\n    const transaction = db.transaction([\"image\"], \"readonly\");\r\n    const objectStore = transaction.objectStore(\"image\");\r\n    const request = objectStore.get(selected);\r\n\r\n    request.onsuccess = function (event) {\r\n      const item = event.target.result;\r\n\r\n      if (item && item.data) {\r\n        console.log(\"Image found in IndexedDB: \", item);\r\n\r\n        // const blob = new Blob([item.data]);\r\n        // let imageUrl = URL.createObjectURL(blob);\r\n        document.querySelector(\r\n          \".text_content_back\"\r\n        ).style.backgroundImage = `url(${item.data})`;\r\n      }\r\n    };\r\n\r\n    request.onerror = function (event) {\r\n      console.error(\"Error fetching image from IndexedDB: \", event);\r\n    };\r\n  }\r\n}\r\n\r\nfunction applyTheme(event) {\r\n  if (event.target.tagName === \"DIV\") {\r\n    applyThemes(event);\r\n  } else {\r\n    createRemoveFromList(\"theme\")(event);\r\n  }\r\n}\r\n\r\nfunction applyThemes(event) {\r\n  console.log(\"apply theme\");\r\n  const text = event.target.textContent;\r\n  const selected = text.replace(/\\s+/g, \"\");\r\n\r\n  if (selected === \"默认\") {\r\n    console.log(\"默认主题\");\r\n    // localtion.reload();\r\n    let theme_none = \"\";\r\n    chrome.storage.local.set({ readeaser_theme: theme_none });\r\n  } else {\r\n    const transaction = db.transaction([\"theme\"], \"readonly\");\r\n    const objectStore = transaction.objectStore(\"theme\");\r\n    const request = objectStore.get(selected);\r\n\r\n    request.onsuccess = function (event) {\r\n      const item = event.target.result;\r\n\r\n      if (item && item.data) {\r\n        console.log(\"Theme found in IndexedDB: \", item);\r\n        const blob = base64ToBlob(item.data, \"application/json\");\r\n        readBlobAsJson(blob)\r\n          .then((data) => {\r\n            console.log(\"解析后的数据: \", data);\r\n            chrome.storage.local.set({ readeaser_theme: selected });\r\n            applyData(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"解析数据时发生错误:\", error);\r\n          });\r\n      } else {\r\n        console.log(\"没有找到匹配的主题或数据类型不符\");\r\n      }\r\n\r\n      request.onerror = function (event) {\r\n        console.error(\"Error fetching image from IndexedDB: \", event);\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nfunction applyData(data) {\r\n  const board = document.querySelector(\".textboard\");\r\n  const back = document.querySelector(\".text_content_back\");\r\n  const text = document.querySelector(\".ch\");\r\n\r\n  try {\r\n    if (!board) throw new Error(\"找不到类名为 'textboard' 的元素\");\r\n    if (!back) throw new Error(\"找不到类名为 'text_content_back' 的元素\");\r\n    if (!text) throw new Error(\"找不到类名为 'ch' 的元素\");\r\n\r\n    board.style.backgroundColor = data.bcolor;\r\n    back.style.backgroundColor = data.fcolor;\r\n    text.style.fontFamily = data.fontFamily;\r\n    text.style.fontWeight = data.fontWeight;\r\n    back.style.backgroundImage = data.backgroundImage;\r\n    back.style.backgroundRepeat = data.backgroundRepeat;\r\n    back.style.backgroundSize = data.backgroundSize;\r\n    back.style.filter = data.filter;\r\n\r\n    if (data.isdark) {\r\n      document.querySelector(\"input[name='mode'][value='dark']\").checked = true;\r\n    } else {\r\n      document.querySelector(\r\n        \"input[name='mode'][value='light']\"\r\n      ).checked = true;\r\n    }\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n}\r\n\r\nfunction base64ToBlob(base64, contentType) {\r\n  const byteCharacters = atob(base64.split(\",\")[1]);\r\n  const byteArrays = [];\r\n\r\n  for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n    const slice = byteCharacters.slice(offset, offset + 512);\r\n    const byteNumbers = new Array(slice.length);\r\n    for (let i = 0; i < slice.length; i++) {\r\n      byteNumbers[i] = slice.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    byteArrays.push(byteArray);\r\n  }\r\n\r\n  return new Blob(byteArrays, { type: contentType });\r\n}\r\n\r\nfunction readBlobAsJson(blob) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function (event) {\r\n      try {\r\n        const jsonString = event.target.result;\r\n        const data = JSON.parse(jsonString);\r\n        resolve(data);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n\r\n    reader.onerror = function (event) {\r\n      reject(new Error(\"读取 Blob 文件时发生错误\"));\r\n    };\r\n\r\n    reader.readAsText(blob);\r\n  });\r\n}\r\n\r\ndocument.querySelector(\".fw input\").addEventListener(\"change\", (e) => {\r\n  const fw = e.target.value;\r\n  document.querySelector(\".ch\").style.fontWeight = fw;\r\n  document.querySelector(\".en\").style.fontWeight = fw;\r\n});\r\n\r\ndocument.querySelectorAll(\".repeat input[name='repeat']\").forEach((re) => {\r\n  re.addEventListener(\"change\", (e) => {\r\n    const value = e.target.value;\r\n    const content = document.querySelector(\".text_content_back\");\r\n    if (value === \"repeat\") {\r\n      content.style.backgroundRepeat = \"repeat\";\r\n      content.style.backgroundSize = \"\";\r\n    } else {\r\n      content.style.backgroundRepeat = \"no-repeat\";\r\n      content.style.backgroundSize = \"cover\";\r\n    }\r\n  });\r\n});\r\n\r\ndocument.querySelector(\".blur input\").addEventListener(\"change\", (e) => {\r\n  const value = e.target.value;\r\n  console.log(value);\r\n  const content = document.querySelector(\".text_content_back\");\r\n  content.style.filter = `blur(${value}px)`;\r\n});\r\n"],"names":[],"sourceRoot":""}